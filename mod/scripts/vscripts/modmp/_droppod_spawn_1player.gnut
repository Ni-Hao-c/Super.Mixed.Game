untyped
global function DropPodSpawn1Player_Init

global function SpawnFromDroppod
global function SpawnPlayerInDropPod

struct {
	array< entity > droppods
} file

struct {
	entity intermissionCam
	array<entity> droppodSpawns

} droppod

void function DropPodSpawn1Player_Init()
{
	RegisterSignal( "PlayerDroppodImpact" ) // signal for sending info messages

	if ( GetMapName() != "mp_lobby" ) // don't run this in lobby
		AddCallback_EntitiesDidLoad( AddDroppodSpawn )
	//AddSpawnCallback( "info_spawnpoint_droppod_start", AddDroppodSpawn )
	//AddCallback_OnRoundEndCleanup( CleanupSpawningDropPods )
}

void function SpawnFromDroppod( entity player, float destructionTime = 10 )
{
	thread SpawnFromDroppod_Threaded( player, destructionTime )
}

void function SpawnFromDroppod_Threaded( entity player, float destructionTime = 10 )
{
	if ( !IsValid( player ) )
		return
	if( GetGameState() >= eGameState.Postmatch )
		return
	// can't implement it good enough
	entity spawnpoint = FindPlayerDroppodSpawnPoint( player.GetTeam() )
	SpawnPlayerInDropPod( player, spawnpoint.GetOrigin(), spawnpoint.GetAngles(), destructionTime )
}

void function CleanupSpawningDropPods()
{
	foreach ( entity pod in file.droppods )
		pod.Destroy()
	
	file.droppods.clear()
}

void function SpawnPlayerInDropPod( entity player, vector targetOrigin, vector angles, float destructionTime = -1 )
{
	if ( !IsValid( player ) )
		return

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	svGlobal.levelEnt.EndSignal( "CleanUpEntitiesForRoundEnd" )
	svGlobal.levelEnt.EndSignal( "CleanUpEntitiesForMatchEnd" )

	table results = {}
	results.droppodLanded <- false
	results.playerLanded <- false // since player's landing will sometimes delay 1 frame(eg. first spawn), have to use another var

	entity pod = CreateDropPod( targetOrigin, angles )
	pod.EndSignal( "OnDestroy" )
	file.droppods.append( pod )

	// add a indicator
	vector surfaceNormal = < 0, 0, 1 >
	int index = GetParticleSystemIndex( $"P_ar_titan_droppoint" )
	entity indicator = StartParticleEffectInWorld_ReturnEntity( index, targetOrigin, surfaceNormal )
	EffectSetControlPointVector( indicator, 1, < 255, 255, 255 > ) // white
	indicator.DisableHibernation()
	SetTeam( indicator, player.GetTeam() )
	indicator.SetOwner( player )
	indicator.kv.VisibilityFlags = ENTITY_VISIBLE_TO_OWNER | ENTITY_VISIBLE_TO_FRIENDLY // owner and teammates can see
	
	// TODO: we need to make a door for this, CreateDropPodDoor in _droppod_fireteam is just busted for some reason tho
	entity camera = CreateEntity( "point_viewcontrol" )
	// can be pretty annoying since droppod is spawned outside of the map
	// tried to modify LaunchAnimDropPod() and add sequenceInitialTime, will cause sound issues
	/*
	camera.SetParent( pod, "ORIGIN" )
	camera.SetLocalOrigin( < 0, 0, 800 > + AnglesToForward( angles ) * -400 )
	camera.SetAngles( < 60, angles.y, 0 > )
	*/
	vector podloaction = pod.GetOrigin() + Vector( 0, 0, 2200 ) // was 3000, maybe higher than boomtown's roof
	camera.SetLocalOrigin( podloaction )
	camera.SetAngles( < 90, angles.y, 0 > )

	// all entity creations done, ready to clean up
	OnThreadEnd
	(
		function(): ( results, player, pod, camera, indicator )
		{
			if ( IsValid( player ) )
			{
				if ( !results.playerLanded ) // thread end but player not landed yet? maybe they died
				{
					// clean up these
					player.ClearParent()
					player.ClearViewEntity()
					player.UnfreezeControlsOnServer()
					DeployAndEnableWeapons( player )
				}
			}

			if ( IsValid( pod ) )
			{
				if ( !results.droppodLanded ) // pod not landing but player died or something?
					CleanupRespawnDroppod( pod ) // clean it immediately
			}

			if ( IsValid( camera ) )
				camera.Destroy()

			if ( IsValid( indicator ) ) // remove indicator
				EffectStop( indicator )
		}
	)
	
	HolsterAndDisableWeapons( player ) // holster weapon so they won't have weapon deploy sound out
	DoRespawnPlayer( player, null )

	// attach pod and camera
	player.SetOrigin( pod.GetOrigin() )
	player.SetAngles( pod.GetAngles() )
	player.SetParent( pod ) // don't use ( pod, "ATTACH", true ), which will cause visual issue while disembarking

	player.FreezeControlsOnServer()
	AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
	player.SetViewEntity( camera, true )
	
	// wait for this
	LaunchAnimDropPod( pod, "pod_testpath", targetOrigin, angles )

	results.droppodLanded = true // mark landing as true
	if ( destructionTime != -1 )
		thread DelayedCleanUpDroppod( pod, destructionTime ) // start droppod cleanup here
	
	//WaitFrame()
	if( GetGameState() < eGameState.Postmatch )
	{
		player.ClearParent()
		player.ClearViewEntity()
		WaitFrame() // try always wait 1 frame here
		//if ( player.s.respawnCount == 1 ) // hack for first respawn, or player will facing the pod for some reason
		//	WaitFrame()

		if ( GetGameState() > eGameState.Prematch ) // make compatiblility with intros
			player.UnfreezeControlsOnServer() // otherwise we unfreeze player in intro

		player.Signal( "PlayerDroppodImpact" )
		RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
		FindNearestSafeSpotAndPutEntity( player, 1 ) // defensive fix
		player.SetAngles( angles ) // always facing the spawnpoint

		// give loadout again so they'll have weapon deploy animations
		if ( Loadouts_CanGivePilotLoadout( player ) ) // to fit vanilla: give loadout upon touched ground, so they'll have weapon's first deploy animation
			Loadouts_TryGivePilotLoadout( player )
		else // fix for northstar: we may disabled loadout grade period, should update their weapon to make first deploy animation show up
		{
			StorePilotWeapons( player )
			RetrievePilotWeapons( player )
		}
		DeployAndEnableWeapons( player )

		results.playerLanded = true // mark as player landed
	}
}

void function DelayedCleanUpDroppod( entity pod, float destructionTime )
{
	pod.EndSignal( "OnDestroy" )
	if ( destructionTime > 0 )
		wait destructionTime

	CleanupRespawnDroppod( pod )
}

void function CleanupRespawnDroppod( entity pod )
{
	// basically same as CleanupFireteamPod()
	EmitSoundAtPosition( TEAM_UNASSIGNED, pod.GetOrigin(), "droppod_dissolve" )
	pod.NotSolid() // so it won't block player's movement
	pod.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )

	file.droppods.remove( file.droppods.find( pod ) )
}

void function AddDroppodSpawn()
{
	// now adding more spawnpoints
	droppod.droppodSpawns.extend( SpawnPoints_GetTitan() )
	droppod.droppodSpawns.extend( GetEntArrayByClass_Expensive( "info_spawnpoint_droppod_start" ) )
	// remove titan start points, since grunt mode uses them as titan's spawn point
	//droppod.droppodSpawns.extend( SpawnPoints_GetTitanStart( TEAM_IMC ) )
	//droppod.droppodSpawns.extend( SpawnPoints_GetTitanStart( TEAM_MILITIA ) )
	// remove droppod regular points, since grunt mode uses them to spawn npcs
	//droppod.droppodSpawns.extend( SpawnPoints_GetDropPod() )

	array<entity> pilotSpawns
	pilotSpawns.extend( SpawnPoints_GetPilot() )
	pilotSpawns.extend( SpawnPoints_GetPilotStart( TEAM_IMC ) )
	pilotSpawns.extend( SpawnPoints_GetPilotStart( TEAM_MILITIA ) )
	foreach ( entity point in pilotSpawns )
	{
		// if there're nothing blocked within 3000 hu we consider use it as a spawnpoint
		TraceResults roofCheck = TraceLine( point.GetOrigin(), point.GetOrigin() + < 0,0,3000 >, point, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
		// if there're also nothing blocking the door we surely use it as a spawnpoint
		TraceResults doorCheck = TraceLine( point.GetOrigin(), point.GetOrigin() + AnglesToForward( < 0,point.GetAngles().y, 0> ) * 30, point, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
		
		//print( "[DROPPOD_RESPAWN] pilot spawn point at: " + string( point.GetOrigin() ) + " roofcheck: " + string( roofCheck.hitEnt ) )
		//print( "[DROPPOD_RESPAWN] pilot spawn point at: " + string( point.GetOrigin() ) + " doorCheck: " + string( doorCheck.hitEnt ) )

		if ( !IsValid( roofCheck.hitEnt ) && !IsValid( doorCheck.hitEnt ) )
		{
			droppod.droppodSpawns.append( point )
			//print( "[DROPPOD_RESPAWN] found a valid pilot spawn point at: " + string( point.GetOrigin() ) )
		}
	}

	foreach ( entity point in droppod.droppodSpawns )
	{
		point.s.droppodLastUsedTime <- -1
		point.s.droppodLastUsedTeam <- TEAM_UNASSIGNED // for better checks?
	}
}

const float SPAWN_ZONE_SEARCH_RADIUS = 1800
const float DROPPOD_POINT_COOLDOWN = 10.0

// should use a better one
entity function FindPlayerDroppodSpawnPoint( int team )
{
	array<entity> spawnPoints = droppod.droppodSpawns
	// modified: make a new function so ai gamemodes don't have to re-decide for each spawn
	//entity zone = DecideSpawnZone_Generic( points, team )
	entity zone = GetCurrentSpawnZoneForTeam( team )
	
	entity chosenPoint
	if ( IsValid( zone ) )
	{
		// 20 Tries to get a random point close to the zone
		for ( int i = 0; i < 20; i++ )
		{
			entity point = spawnPoints[ RandomInt( spawnPoints.len() ) ]
		
			if ( Distance2D( point.GetOrigin(), zone.GetOrigin() ) < SPAWN_ZONE_SEARCH_RADIUS && point.s.droppodLastUsedTime + DROPPOD_POINT_COOLDOWN < Time() ) // smaller search
			{
				chosenPoint = point
				//print( "[DROPPOD_RESPAWN] found a point which inside spawn zone and off cooldown!" )
				break
			}
		}
	}
	
	if ( !IsValid( chosenPoint ) )
	{
		// 20 Tries to get a random point off cooldown
		for ( int i = 0; i < 20; i++ )
		{
			entity point = spawnPoints[ RandomInt( spawnPoints.len() ) ]

			if ( point.s.droppodLastUsedTime + DROPPOD_POINT_COOLDOWN < Time() )
			{
				chosenPoint = point
				//print( "[DROPPOD_RESPAWN] found a point which is off cooldown!" )
				break
			}
		}
	}

	// still have no valid point... use a completely random one
	if ( !IsValid( chosenPoint ) )
	{
		chosenPoint = spawnPoints[ RandomInt( spawnPoints.len() ) ]
		//print( "[DROPPOD_RESPAWN] can't find any valid point! now using a random one" )
	}

	chosenPoint.s.droppodLastUsedTime = Time()
	//print( "[DROPPOD_RESPAWN] current respawn point origin: " + string( chosenPoint.GetOrigin() ) )
	return chosenPoint
}