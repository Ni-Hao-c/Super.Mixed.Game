untyped
global function Modded_Gamemode_GruntMode_Init

// npc counts
const int SQUADS_PER_TEAM = 5
//const int SQUADS_PER_TEAM_MORE_PLAYERS = 3 // maybe do reduced squad if we have more players and reached higher level
const int SQUADS_PER_TEAM_HIGH_LEVEL = 3 // maybe do reduced squad if we have reached higher level
const int REAPERS_PER_TEAM = 2 // was 2, reduced reaper spawn since we're using tick spawner reapers

const int MARVINS_PER_TEAM = 0
const int PROWLERS_PER_TEAM = 3
const int PROWLER_SQUADS_PER_TEAM = 0 // prowler squad: 2 cqb prowler with 3 small prowlers
const int PILOTS_PER_TEAM = 3

const int TITANS_PER_TEAM = 0
const int GUNSHIPS_PER_TEAM = 0 // was 2, removed until I figure out how to make gunships attacking

const float WEAPON_PACKAGE_INTERVAL = 55.0 // time for each weapon care package( gruntmode_weapon_carepackage 1 )
const float AMMO_PACKAGE_INTERVAL = 35.0 // time for each ammo care package

// escalator
const int LEVEL_SPECTRES = 50
const int LEVEL_STALKERS = 100
const int LEVEL_REAPERS = 180
const int LEVEL_GUNSHIPS = 200
const int LEVEL_TITANS = 250

// scores
const int PLAYER_SCORE_AMOUNT = 3
const int PLAYER_SPECIALIST_SCORE_AMOUNT = 5
const int PILOT_SCORE_AMOUNT = 5
const int GUNSHIP_SCORE_AMOUNT = 5
const int MARVIN_SCORE_AMOUNT = 1
const int GRUNT_SCORE_AMOUNT = 1
const int SPECIALIST_GRUNT_SCORE_AMOUNT = 2
const int SPECTRE_SCORE_AMOUNT = 1 // was 2. spectres shouldn't have too many score
const int STALKER_SCORE_AMOUNT = 2
const int PROWLER_SCORE_AMOUNT = 2
const int SMALL_PROWLER_SCORE_AMOUNT = 1
const int REAPER_SCORE_AMOUNT = 5
const int DRONE_SCORE_AMOUNT = 0
const int TITAN_SCORE_AMOUNT = 10

const array<string> GRUNT_MODE_PLAYLIST =
[
	"mp_glitch",
    "mp_colony02",
    "mp_wargames",
    "mp_eden",
    "mp_drydock",
    "mp_black_water_canal",
    "mp_thaw",
    "mp_grave",
    "mp_homestead",
    "mp_forwardbase_kodai",
    "mp_angel_city",
    "mp_relic02",
    "mp_rise",
    "mp_complex3",
    "mp_crashsite3"
]

struct
{
	// Due to team based escalation everything is an array
	array< int > levels = [ LEVEL_SPECTRES, LEVEL_SPECTRES ]
	array< array< string > > podEntities = [ [ "npc_soldier" ], [ "npc_soldier" ] ]
	array< bool > reapers = [ false, false ]

	array< bool > marvins = [ false, false ]
	array< bool > prowlers = [ false, false ] // bind with stalkers

	array< bool > gunships = [ false, false ]
	array< bool > pilots = [ false, false ]
	array< bool > titans = [ false, false ]
} file


void function Modded_Gamemode_GruntMode_Init()
{
	BecomesGruntMode_Init() // init everything

	SetSpawnpointGamemodeOverride( ATTRITION ) // use bounty hunt spawns as vanilla game has no spawns explicitly defined for aitdm

	AddCallback_GameStateEnter( eGameState.Prematch, OnPrematchStart )
	AddCallback_GameStateEnter( eGameState.Playing, OnPlaying )
	AddCallback_GameStateEnter( eGameState.Postmatch, OnGamePostmatch )

	// scoring
	ScoreEvent_Disable( GetScoreEvent( "KillPilot" ) ) // disable pilot killed event, we use grunt and spectre ones
	AddCallback_OnPlayerKilled( HandleScoreForPlayerOrNPCKill )
	AddCallback_OnNPCKilled( HandleScoreForPlayerOrNPCKill )
	// modified callback in _score.nut: for handling doomed health loss titans
	AddCallback_TitanDoomedScoreEvent( HandleTitanDoomedScore )

	AddCallback_OnClientConnected( OnPlayerConnected )

	AddCallback_NPCLeeched( OnSpectreLeeched )

	ScoreEvent_SetupEarnMeterValuesForMixedModes()

	ClassicMP_ForceDisableEpilogue( true )
	Riff_ForceBoostAvailability( eBoostAvailability.Disabled )
	Riff_ForceTitanAvailability( eTitanAvailability.Never )

	// so you're likely no need to wait so freaking long, !!! tempfix specific
	SetWaitingForPlayersMaxDuration( 1.0 )
    ClassicMP_SetCustomIntro( ClassicMP_GruntModeIntro_Setup, GRUNTMODE_INTRO_LENGTH )
}

//------------------------------------------------------

void function OnPrematchStart()
{
	thread StratonHornetDogfightsIntense()
}

void function OnPlaying()
{
	// don't run spawning code if ains and nms aren't up to date
	if ( GetAINScriptVersion() == AIN_REV && GetNodeCount() != 0 )
	{
		thread SpawnIntroBatch( TEAM_MILITIA )
		thread SpawnIntroBatch( TEAM_IMC )
	}

	// cleaning up
	CleanUpOverloadedTicks()
	TryCleanupBoredNPCGameLong()
}

void function OnGamePostmatch()
{
	if ( GetCurrentPlaylistVarInt( "gruntmode_auto_map", 1 ) != 0 )
	{
		array<string> curPlayList = GRUNT_MODE_PLAYLIST
		int mapIndex = curPlayList.find( GetMapName() )
		mapIndex += 1 // next map index
		if( mapIndex == curPlayList.len() ) // reached last map?
			mapIndex = 0
		string nextMap = curPlayList[mapIndex]

		ServerCommand( "map " + nextMap )
	}
}

void function OnPlayerConnected( entity player )
{
	Remote_CallFunction_NonReplay( player, "ServerCallback_AITDM_OnPlayerConnected" )
	Chat_ServerPrivateMessage( player, "每次以随机的兵种重生\n娱乐性质服务器，请多多包容其余玩家\n由于npc数目过多，卡顿属正常现象", false, false )
}

//------------------------------------------------------

void function HandleScoreForPlayerOrNPCKill( entity victim, entity attacker, var damageInfo )
{
	if( !IsValid( attacker ) )
		return
	if ( !AttackerIsValidForAiTDMScore( victim, attacker, damageInfo ) )
		return

	// if it's a npc with bossplayer/owner...
	if ( attacker.IsNPC() )
	{
		// reassign attacker
		attacker = GetAiTDMAttackOwner( attacker )
	}

	// if victim is a non-titan npc that owned by players, don't add score
	if ( !VictimIsValidForAiTDMScore( victim ) )
		return

	string className = victim.GetClassName()
	int scoreToAdd = 0
	string scoreEvent = "" // for npcs can't handle by OnNPCKilled(), do a extra score event

	if ( victim.IsPlayer() )
	{
		if ( GruntMode_IsSpecialistClass( victim ) )
			scoreToAdd = PLAYER_SPECIALIST_SCORE_AMOUNT
		else
			scoreToAdd = PLAYER_SCORE_AMOUNT

		// fake score event
		if ( victim.IsMechanical() )
			scoreEvent = "AttritionSpectreKilled" // centered medal event
		else
			scoreEvent = "AttritionGruntKilled" // centered medal event
	}

	if ( className == "npc_pilot_elite" )
	{
		scoreToAdd = PILOT_SCORE_AMOUNT
		scoreEvent = "EliminatePilot"
		// we can't add a obitary for npc pilots since OBITUARY_ENABLED_NPC is false
	}

	if ( className == "npc_gunship" )
		scoreToAdd = GUNSHIP_SCORE_AMOUNT

	if ( className == "npc_marvin" )
		scoreToAdd = MARVIN_SCORE_AMOUNT

	if ( className == "npc_prowler" )
	{
		// hardcoded here: if it's a small prowler we add less score
		if ( float( victim.kv.modelscale ) < 1.0 )
			scoreToAdd = SMALL_PROWLER_SCORE_AMOUNT
		else
			scoreToAdd = PROWLER_SCORE_AMOUNT
	}

	if ( className == "npc_spectre" )
		scoreToAdd = SPECTRE_SCORE_AMOUNT

	if ( className == "npc_stalker" )
		scoreToAdd = STALKER_SCORE_AMOUNT

	if ( className == "npc_super_spectre" )
		scoreToAdd = REAPER_SCORE_AMOUNT

	if ( className == "npc_soldier" )
	{
		if ( GRUNTMODE_SPECIALIST_GRUNTS.contains( victim.GetAISettingsName() ) )
			scoreToAdd = SPECIALIST_GRUNT_SCORE_AMOUNT
		else
			scoreToAdd = GRUNT_SCORE_AMOUNT
	}
	
	if ( className == "npc_drone" )
		scoreToAdd = DRONE_SCORE_AMOUNT

	// Player ejecting triggers this without the extra check
	if ( victim.IsTitan() && victim.GetBossPlayer() != attacker )
	{
		if ( TitanHasNpcPilot( victim ) ) // pilot was killed without ejecting
		{
			scoreToAdd = TITAN_SCORE_AMOUNT + PILOT_SCORE_AMOUNT
			scoreEvent = "EliminatePilot"
		}
		else if ( victim.IsPlayer() ) // fix for player score!
			scoreToAdd = TITAN_SCORE_AMOUNT + PLAYER_SCORE_AMOUNT
		else // ejecting auto titan
			scoreToAdd = TITAN_SCORE_AMOUNT

		// modified function in _titan_health.gnut, recovering ttf1 behavior: we add score on doom but not on death for health loss titans
		if ( !TitanHealth_GetSoulInfiniteDoomedState( victim.GetTitanSoul() ) )
			scoreToAdd -= TITAN_SCORE_AMOUNT // remove titan score on kill for doomed health loss titans

		// obit, has been fixed in _score.gnut
		//foreach ( entity player in GetPlayerArray() )
		//	Remote_CallFunction_NonReplay( player, "ServerCallback_OnTitanKilled", attacker.GetEncodedEHandle(), victim.GetEncodedEHandle(), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamageSourceIdentifier( damageInfo ) )
	}

	if ( scoreToAdd > 0 )
		AddAiTDMTeamScore( attacker, scoreToAdd ) // this can handle both players' and npcs' kills
	if( attacker.IsPlayer() ) // specific for players
	{
		if ( scoreEvent != "" )
			AddPlayerScore( attacker, scoreEvent, victim )
	}
}

bool function AttackerIsValidForAiTDMScore( entity victim, entity attacker, var damageInfo )
{
	if( !attacker.IsNPC() && !attacker.IsPlayer() ) // not killed by anybody
		return false

	if ( attacker == victim ) // suicide!
		return false

	// all checks passed
	return true
}

bool function VictimIsValidForAiTDMScore( entity victim )
{
	// if victim is a non-titan npc that owned by players, don't add score
	if ( victim.IsNPC() && !victim.IsTitan() )
	{
		entity bossPlayer = victim.GetBossPlayer()
		entity owner = victim.GetOwner()
		if ( IsValid( bossPlayer ) )
		{
			if ( bossPlayer.IsPlayer() )
				return false
		}
		if ( IsValid( owner ) )
		{
			if ( owner.IsPlayer() )
				return false
		}
	}

	// all checks passed
	return true
}

entity function GetAiTDMAttackOwner( entity ent )
{
	entity attacker
	if ( ent.IsPlayer() ) // player always use themselves as attacker
		return ent
	if ( IsValid( ent.GetBossPlayer() ) )
		attacker = ent.GetBossPlayer()
	if ( IsValid( ent.GetOwner() ) )
		attacker = ent.GetOwner()
	// attacker still not valid?
	if ( !IsValid( attacker ) )
		return ent // use npc or something itself
	return attacker
}

void function AddAiTDMTeamScore( entity ent, int score )
{
	// Add score + update network int to trigger the "Score +n" popup
	AddTeamScore( ent.GetTeam(), score )
	if ( ent.IsPlayer() )
	{
		ent.AddToPlayerGameStat( PGS_ASSAULT_SCORE, score )
		ent.SetPlayerNetInt( "AT_bonusPoints", ent.GetPlayerGameStat( PGS_ASSAULT_SCORE ) )
	}
}

// for handling doomed health loss titans
void function HandleTitanDoomedScore( entity victim, var damageInfo, bool firstDoom )
{
	if ( !firstDoom ) // only add score on first doom
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( !IsValid( attacker ) )
		return

	if ( !AttackerIsValidForAiTDMScore( victim, attacker, damageInfo ) )
		return

	// if it's a npc with bossplayer/owner...
	if ( attacker.IsNPC() )
	{
		// reassign attacker
		attacker = GetAiTDMAttackOwner( attacker )
	}

	// if victim is a non-titan npc that owned by players, don't add score
	if ( !VictimIsValidForAiTDMScore( victim ) )
		return

	if ( !TitanHealth_GetSoulInfiniteDoomedState( victim.GetTitanSoul() ) )
		AddAiTDMTeamScore( attacker, TITAN_SCORE_AMOUNT )
}

//------------------------------------------------------

// CHECK FUNCTIONS

bool function ShouldSpawnSpecialistSquad()
{
	// removed. to make game more chaotic, always spawn specialist squad
	//return RandomInt( 3 ) > 0 // 66% chance of spawning a specialist squad(??
	return true
}

bool function ShouldSpawnDropship()
{
	array<entity> points = GetZiplineDropshipSpawns()
	if ( points.len() <= 4 ) // must have more than 4 points
		return false

	return RandomInt( 3 ) == 0 // 33% chance of choose to spawn a dropship
}

// hardcoded here
const array<string> GRUNTMODE_SPECIALIST_GRUNTS =
[
	"npc_soldier_shield_captain",
	"npc_soldier_pve_specialist",
	"npc_soldier_sidearm",
	"npc_soldier_pve_eliteguard",
]

const array<string> GRUNTMODE_SPECIALIST_GRUNTS_RARE = // specialist class in this array will have less picking rate
[
	"npc_soldier_shield_captain",
]

string function GetGruntModeSpecialistGruntLeader()
{
	// 15% chance of spawning a rare specialist grunt
	bool spawnRareSpecialist = RandomIntRange( 1, 100 ) <= 15
	string leaderSet = "npc_soldier_pve_specialist"
	if ( spawnRareSpecialist )
	{
		//print( "spawning from rare specialist list!" )
		leaderSet = GRUNTMODE_SPECIALIST_GRUNTS_RARE[ RandomInt( GRUNTMODE_SPECIALIST_GRUNTS_RARE.len() ) ]
	}
	else
	{
		//print( "spawning from generic specialist list!" )
		array<string> genericSpecialist
		foreach ( aiSet in GRUNTMODE_SPECIALIST_GRUNTS )
		{
			if ( !GRUNTMODE_SPECIALIST_GRUNTS_RARE.contains( aiSet ) )
			{
				//print( "generic specialist contains: " + aiSet )
				genericSpecialist.append( aiSet )
			}
		}
		leaderSet = genericSpecialist[ RandomInt( genericSpecialist.len() ) ]
	}

	//print( "leaderAiSet: " + leaderSet )

	return leaderSet
}

int function GetSpecialistLeaderHealth( int team, string otherSpawnWith )
{
	int index = team == TEAM_MILITIA ? 0 : 1
	return 200 + ( 60 * file.podEntities[ index ].find( otherSpawnWith ) )
}

bool function ShouldSpawnBossTitan()
{
	return RandomInt( 5 ) == 0 // boss titans has 20% chance to spawn
}

string function GetBossTitanSpawnName( int team )
{
	// team specific
	if ( team == TEAM_IMC )
	{
		const array<string> imcBossList =
		[
			"slone",
			"ash",
			"richter",
			"kane",
			"blisk",
			"viper",
		]
		return imcBossList[ RandomInt( imcBossList.len() ) ]
	}
	else if ( team == TEAM_MILITIA )
	{
		const array<string> mltBossList =
		[
			"jack",
			"sarah",
			//"sarah_monarch",
		]
		return mltBossList[ RandomInt( mltBossList.len() ) ]
	}

	// default case
	return "" // empty string means random
}

bool function ReachedPlayerCheckAmount()
{
	int maxPlayers = GetCurrentPlaylistVarInt( "max_players", 16 )
	if ( float ( GetPlayerArray().len() ) >= float ( maxPlayers ) * 0.6 )
		return true
	return false
}

//


void function SpawnIntroBatch( int team )
{
	// care package variant
	if ( GetCurrentPlaylistVarInt( "gruntmode_weapon_carepackage", 0 ) != 0 )
		thread SpawnerWeapons( team )
	else
		thread SpawnerAmmoRefill( team )

	array<entity> dropPodNodes = GetEntArrayByClass_Expensive( "info_spawnpoint_droppod_start" )
	array<entity> dropShipNodes = GetValidIntroDropShipSpawn( dropPodNodes )  
	
	array<entity> podNodes
	
	array<entity> shipNodes
	
	
	// mp_rise has weird droppod_start nodes, this gets around it
	// To be more specific the teams aren't setup and some nodes are scattered in narnia
	if( GetMapName() == "mp_rise" )
	{
		entity spawnPoint
		
		// Get a spawnpoint for team
		foreach ( point in GetEntArrayByClass_Expensive( "info_spawnpoint_dropship_start" ) )
		{
			if ( point.HasKey( "gamemode_tdm" ) )
				if ( point.kv[ "gamemode_tdm" ] == "0" )
					continue
			
			if ( point.GetTeam() == team )
			{
				spawnPoint = point
				break
			}
		}
		
		// Get nodes close enough to team spawnpoint
		foreach ( node in dropPodNodes )
		{
			if ( node.HasKey("teamnum") && Distance2D( node.GetOrigin(), spawnPoint.GetOrigin()) < 2000 )
				podNodes.append( node )
		}
	}
	else
	{
		// Sort per team
		foreach ( node in dropPodNodes )
		{
			if ( node.GetTeam() == team )
				podNodes.append( node )
		}
	}

	shipNodes = GetValidIntroDropShipSpawn( podNodes )


	// Spawn logic
	int startIndex = 0
	bool first = true
	entity node
	string introSpawnClass = "npc_soldier"
	
	int pods = RandomInt( podNodes.len() + 1 )
	
	int ships = shipNodes.len()
	
	for ( int i = 0; i < SQUADS_PER_TEAM; i++ )
	{
		if ( pods != 0 || ships == 0 )
		{
			int index = i
			
			if ( index > podNodes.len() - 1 )
			index = RandomInt( podNodes.len() )
			
			node = podNodes[ index ]
			if ( ShouldSpawnSpecialistSquad() )
			{
				array< entity > points = GetZiplineDropshipSpawns()
				string leaderSet = GetGruntModeSpecialistGruntLeader()
				int leaderHealth = GetSpecialistLeaderHealth( team, leaderSet )
				thread ExtraSpawner_SpawnSpecialistGruntDropPod( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, leaderSet, leaderHealth )
			}
			else
				thread ExtraSpawner_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, introSpawnClass )

			pods--
		}
		else
		{
			if ( startIndex == 0 ) 
			startIndex = i // save where we started
			
			node = shipNodes[ i - startIndex ]
			if ( ShouldSpawnSpecialistSquad() )
			{
				array< entity > points = GetZiplineDropshipSpawns()
				string leaderSet = GetGruntModeSpecialistGruntLeader()
				int leaderHealth = GetSpecialistLeaderHealth( team, leaderSet )
				thread ExtraSpawner_SpawnSpecialistGruntDropShip( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, 4, leaderSet, leaderHealth )
			}
			else
				thread ExtraSpawner_SpawnDropShip( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, 4 )
			
			ships--
		}
		
		// Vanilla has a delay after first spawn
		if ( first )
			wait 2
		
		first = false
	}

	wait 5
	thread Spawner( team )
	thread SpawnerExtend( team )
}

// Populates the match
void function Spawner( int team )
{
	//svGlobal.levelEnt.EndSignal( "GameStateChanged" )

	int index = team == TEAM_MILITIA ? 0 : 1

	while( GetGameState() == eGameState.Playing )
	{
		Escalate( team )

		WaitFrame() // wait a frame each loop

		// TODO: this should possibly not count scripted npc spawns, probably only the ones spawned by this script
		array<entity> npcs = GetNPCArrayOfTeam( team )
		int count = npcs.len()
		int reaperCount = GetNPCArrayEx( "npc_super_spectre", team, -1, <0,0,0>, -1 ).len()

		// REAPERS
		if ( file.reapers[ index ] )
		{
			array< entity > points = SpawnPoints_GetTitan()
			if ( reaperCount < REAPERS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//thread AiGameModes_SpawnReaper( node.GetOrigin(), node.GetAngles(), team, "npc_super_spectre_aitdm", ReaperHandler )
				// crazy reaper
				string reaperSettings = "npc_super_spectre_aitdm"
				string tickSettings = "npc_frag_drone"
				if ( CoinFlip() ) // 50% change of spawning sp ticks, 50% chance spawning mp ticks
					tickSettings = "npc_frag_drone_throwable"
				thread ExtraSpawner_SpawnReaperCanLaunchTicks( node.GetOrigin(), node.GetAngles(), team, reaperSettings, tickSettings )
				wait 8 // wait 8 for each reaper spawn. should always keep highter than REAPER_WARPFALL_DELAY (current is 4.7)
			}
		}

		// NORMAL SPAWNS
		int maxSquads = SQUADS_PER_TEAM
		//if ( ReachedPlayerCheckAmount() && file.reapers[ index ] ) // if we have pretty much players and reached reaper level
		//	maxSquads = SQUADS_PER_TEAM_MORE_PLAYERS // do reduced minions count
		if ( file.reapers[ index ] )
			maxSquads = SQUADS_PER_TEAM_HIGH_LEVEL
		if ( count < maxSquads * 4 - 2 )
		{
			if ( ShouldSpawnSpecialistSquad() )
			{
				array< entity > points = GetZiplineDropshipSpawns()
				
				string ent = file.podEntities[ index ][ RandomInt( file.podEntities[ index ].len() ) ]
				string leaderSet = GetGruntModeSpecialistGruntLeader()
				// add health depending on what npc it spawning with
				int leaderHealth = GetSpecialistLeaderHealth( team, ent )
				//print( "RUNNING ExtraSpawner_SpawnSpecialistGruntDropPod()" )
				//print( "leaderHealth is: " + string( leaderHealth ) )
				if ( ShouldSpawnDropship() )
				{
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					thread ExtraSpawner_SpawnSpecialistGruntDropShip( node.GetOrigin(), node.GetAngles(), team, "npc_soldier", 4, leaderSet, leaderHealth )
					wait 6 // dropship may take some time to really spawn a squad
					continue
				}
				
				points = SpawnPoints_GetDropPod()
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				thread ExtraSpawner_SpawnSpecialistGruntDropPod( node.GetOrigin(), node.GetAngles(), team, ent, leaderSet, leaderHealth )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
			else
			{
				string ent = file.podEntities[ index ][ RandomInt( file.podEntities[ index ].len() ) ]

				array< entity > points = GetZiplineDropshipSpawns()

				if ( ShouldSpawnDropship() )
				{
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					thread ExtraSpawner_SpawnDropShip( node.GetOrigin(), node.GetAngles(), team, ent, 4 )
					wait 6 // dropship may take some time to really spawn a squad
					continue
				}

				points = SpawnPoints_GetDropPod()
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				thread ExtraSpawner_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, ent )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
		}
	}
}

void function SpawnerExtend( int team )
{
	//svGlobal.levelEnt.EndSignal( "GameStateChanged" )

	int index = team == TEAM_MILITIA ? 0 : 1

	while( GetGameState() == eGameState.Playing )
	{
		WaitFrame() // wait a frame each loop

		int marvinCount = GetNPCArrayEx( "npc_marvin", team, -1, <0,0,0>, -1 ).len()
		int prowlerCount = GetNPCArrayEx( "npc_prowler", team, -1, <0,0,0>, -1 ).len()
		int gunshipCount = GetNPCArrayEx( "npc_gunship", team, -1, <0,0,0>, -1 ).len()
		int titanCount = GetNPCArrayEx( "npc_titan", team, -1, <0,0,0>, -1 ).len()
		int pilotCount = GetNPCArrayEx( "npc_pilot_elite", team, -1, <0,0,0>, -1 ).len() + GetNPCArrayEx( "npc_titan", team, -1, <0,0,0>, -1 ).len()

		// GUNSHIPS
		if ( file.gunships[ index ] )
		{
			array< entity > points = SpawnPoints_GetDropPod()
			if ( gunshipCount < GUNSHIPS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				thread ExtraSpawner_SpawnGunShip( node.GetOrigin(), node.GetAngles(), team )
				wait 5 // on succesful spawn
			}
		}

		// TITANS
		if ( file.titans[ index ] )
		{
			array< entity > points = SpawnPoints_GetDropPod()
			if ( titanCount < TITANS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				thread ExtraSpawner_SpawnTitan( node.GetOrigin(), node.GetAngles(), team, true )
				wait 8 // wait 8s on succesful titan spawn
			}
		}

		// PILOTS
		if ( file.pilots[ index ] )
		{
			array< entity > points
			points.extend( SpawnPoints_GetTitanStart( TEAM_IMC ) )
			points.extend( SpawnPoints_GetTitanStart( TEAM_MILITIA ) )
			if ( pilotCount < PILOTS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//entity titan = AiGameModes_SpawnTitanRandom( node.GetOrigin(), node.GetAngles(), team )
				if ( ShouldSpawnBossTitan() ) 
				{
					string spawnName = GetBossTitanSpawnName( -1 ) // get bosstitan spawn name without team check
					thread ExtraSpawner_SpawnBossTitan( node.GetOrigin(), node.GetAngles(), team, spawnName )
				}
				else
					thread ExtraSpawner_SpawnPilotCanEmbark( node.GetOrigin(), node.GetAngles(), team )

				wait 8 // wait 8 for each titan spawn. should always keep highter than SpawnPilotCanEmbark()'s titan spawn delay(current is 3)
			}
		}

		// MARVINS
		if ( file.marvins[ index ] )
		{
			string ent = "npc_marvin"
			array< entity > points = SpawnPoints_GetDropPod()
			if ( marvinCount < MARVINS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//thread AiGameModes_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, ent )
				// spawn 2 marvins per droppod
				thread ExtraSpawner_SpawnNPCInDropPod( node.GetOrigin(), node.GetAngles(), team, ent, 2 )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
		}

		// PROWLERS
		if ( file.prowlers[ index ] )
		{
			string ent = "npc_prowler"
			array< entity > points = SpawnPoints_GetDropPod()
			if ( prowlerCount < PROWLERS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//thread AiGameModes_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, ent )
				// spawn 1 prowler per droppod
				thread ExtraSpawner_SpawnNPCInDropPod( node.GetOrigin(), node.GetAngles(), team, ent, 1 )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
		}

		// PROWLER SQUADS
		if ( file.prowlers[ index ] )
		{
			//print( "prowlerCount: " + string( prowlerCount ) )
			array< entity > points = SpawnPoints_GetDropPod()
			if ( prowlerCount < PROWLER_SQUADS_PER_TEAM * 4 - 2 )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//print( "RUNNING ExtraSpawner_SpawnProwlerSquadDropPod()" )
				thread ExtraSpawner_SpawnProwlerSquadDropPod( node.GetOrigin(), node.GetAngles(), team )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
		}
	}
}

void function SpawnerWeapons( int team )
{
	//svGlobal.levelEnt.EndSignal( "GameStateChanged" )
	wait 10 // initial wait

	while( GetGameState() == eGameState.Playing )
	{
		wait WEAPON_PACKAGE_INTERVAL

		foreach( entity player in GetPlayerArrayOfTeam( team ) )
		{
			NSSendLargeMessageToPlayer( player, "補給艙運送中! ", "補充重火力與武器彈藥，並獲取一把榴彈兵武器", 15, "rui/callsigns/callsign_69_col" )
			//NSSendLargeMessageToPlayer( player, "Delivering Care Package!", "Refill ordnance and weapon ammo, also get a grenadier weapon", 15, "rui/callsigns/callsign_69_col" )
		}
		array< entity > points = SpawnPoints_GetDropPod()

		entity node = points[ GetSpawnPointIndex( points, team ) ]
		//waitthread SpawnReaperDorpsWeapons( node.GetOrigin(), node.GetAngles(), WEAPONS, MODS )
		ExtraSpawner_SpawnCarePackageToGetWeapons( node.GetOrigin(), node.GetAngles(), WEAPON_PACKAGE_INTERVAL - 6, 10 ) // carepackages will take 10s to drop
	}
}

// care package variant
void function SpawnerAmmoRefill( int team )
{
	wait 10 // initial wait

	while( GetGameState() == eGameState.Playing )
	{
		wait AMMO_PACKAGE_INTERVAL

		foreach( entity player in GetPlayerArrayOfTeam( team ) )
		{
			NSSendLargeMessageToPlayer( player, "補給艙運送中! ", "補充戰術技能、重火力與武器彈藥", 15, "rui/callsigns/callsign_69_col" )
			//NSSendLargeMessageToPlayer( player, "Delivering Care Package!", "Refill tactical ability, ordnance and weapon ammo", 15, "rui/callsigns/callsign_69_col" )
		}
		array< entity > points = SpawnPoints_GetDropPod()

		entity node = points[ GetSpawnPointIndex( points, team ) ]
		//waitthread SpawnReaperDorpsWeapons( node.GetOrigin(), node.GetAngles(), WEAPONS, MODS )
		ExtraSpawner_SpawnCarePackageToRefillAmmo( node.GetOrigin(), node.GetAngles(), AMMO_PACKAGE_INTERVAL - 6, 10 ) // carepackages will take 10s to drop
	}
}

// Based on points tries to balance match
void function Escalate( int team )
{
	int score = GameRules_GetTeamScore( team )
	int index = team == TEAM_MILITIA ? 1 : 0
	// This does the "Enemy x incoming" text
	string defcon = team == TEAM_MILITIA ? "IMCdefcon" : "MILdefcon"

	if ( score < file.levels[ index ] )
		return

	switch ( file.levels[ index ] )
	{
		case LEVEL_SPECTRES:
			file.levels[ index ] = LEVEL_STALKERS
			file.marvins[ index ] = true
			file.podEntities[ index ].append( "npc_spectre" )
			SetGlobalNetInt( defcon, 2 )
			return

		case LEVEL_STALKERS:
			file.levels[ index ] = LEVEL_REAPERS
			file.marvins[ index ] = false
			file.prowlers[ index ] = true
			file.podEntities[ index ].append( "npc_stalker" )
			SetGlobalNetInt( defcon, 3 )
			return

		case LEVEL_REAPERS:
			file.levels[ index ] = LEVEL_GUNSHIPS
			file.reapers[ index ] = true
			SetGlobalNetInt( defcon, 4 )
			return

        case LEVEL_GUNSHIPS:
			file.levels[ index ] = LEVEL_TITANS
			file.gunships[ index ] = true
			SetGlobalNetInt( defcon, 5 )
			return

		case LEVEL_TITANS:
			file.levels[ index ] = 9999
			file.prowlers[ index ] = false
			file.pilots[ index ] = true
			file.titans[ index ] = true
			SetGlobalNetInt( defcon, 6 )
			return
	}

	// why we have to run into unreachable?
	//unreachable // hopefully
}

//------------------------------------------------------

int function GetSpawnPointIndex( array< entity > points, int team )
{
	// modified: make a new function so ai gamemodes don't have to re-decide for each spawn
	//entity zone = DecideSpawnZone_Generic( points, team )
	entity zone = GetCurrentSpawnZoneForTeam( team )

	if ( IsValid( zone ) )
	{
		// 20 Tries to get a random point close to the zone
		for ( int i = 0; i < 20; i++ )
		{
			int index = RandomInt( points.len() )

			if ( Distance2D( points[ index ].GetOrigin(), zone.GetOrigin() ) < 6000 )
				return index
		}
	}

	return RandomInt( points.len() )
}

//------------------------------------------------------

// Award for hacking
void function OnSpectreLeeched( entity spectre, entity player )
{
	// Set Owner so we can filter in HandleScore
	spectre.SetOwner( player )
	// Add score + update network int to trigger the "Score +n" popup
	AddTeamScore( player.GetTeam(), 1 )
	player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, 1 )
	player.SetPlayerNetInt("AT_bonusPoints", player.GetPlayerGameStat( PGS_ASSAULT_SCORE ) )
}

// ticks clean up
void function CleanUpOverloadedTicks()
{
	thread CleanUpOverloadedTicks_Threaded()
}

void function CleanUpOverloadedTicks_Threaded()
{
	array<entity> tickArray = GetNPCArrayByClass( "npc_frag_drone" )
	int maxTicks = REAPERS_PER_TEAM * 4 + 2
	while ( true )
	{
		if( tickArray.len() > maxTicks ) // clean up ticks spawned by reapers
		{
			if ( IsAlive( tickArray[0] ) )
				tickArray[0].Die() // this may kill somebody lol
		}
		WaitFrame()
	}
}

// npc clean up
void function TryCleanupBoredNPCGameLong()
{
	thread TryCleanupBoredNPCGameLong_Threaded()
}

void function TryCleanupBoredNPCGameLong_Threaded()
{
	// keep searching new npcs and run CleanupBoredNPCThread() for them
	while ( true )
	{
		foreach ( entity npc in GetNPCArray() )
		{
			if ( !( "waitingToBeCleanUp" in npc.s ) )
				npc.s.waitingToBeCleanUp <- false
			if ( !npc.s.waitingToBeCleanUp )
			{
				thread CleanupBoredNPCThread( npc )
				npc.s.waitingToBeCleanUp = true
			}
		}
		WaitFrame()
	}
}

void function CleanupBoredNPCThread( entity guy )
{
	// track all ai that we spawn, ensure that they're never "bored" (i.e. stuck by themselves doing fuckall with nobody to see them) for too long
	// if they are, kill them so we can free up slots for more ai to spawn
	// we shouldn't ever kill ai if players would notice them die

	// NOTE: this partially covers up for the fact that we script ai alot less than vanilla probably does
	// vanilla probably messes more with making ai assaultpoint to fights when inactive and stuff like that, we don't do this so much

	if ( guy.GetClassName() == "npc_marvin" ) // never clean up marvins
		return
	guy.EndSignal( "OnDestroy" )
	// cover spawning time from dropship/pod + before we start cleaning up
	WaitFrame()
	while ( IsValid( guy.GetParent() ) )
		WaitFrame()

	wait 10.0 // initial wait
	int team = guy.GetTeam()
	vector lastCheckOrigin = guy.GetOrigin() // if they get stucked we also clean up
	int cleanupFailures = 0 // when this hits 2, cleanup the npc
	while ( cleanupFailures < 2 )
	{
		wait 10.0

		if ( guy.Anim_IsActive() ) // anim active, such as marvin doing a job or npc being executed
			continue
		entity enemy = guy.GetEnemy()
		if ( IsValid( enemy ) && enemy.IsPlayer() ) // targeting a player
			continue

		// if the npc is owner by player, we skip checks
		entity owner = guy.GetOwner()
		entity bossPlayer = guy.GetBossPlayer()
		if ( IsValid( owner ) )
		{
			if ( owner.IsPlayer() )
				continue
		}
		if ( IsValid( bossPlayer ) )
		{
			if ( bossPlayer.IsPlayer() )
				continue
		}

		// if npc is a titan with bubbleshield, we skip checks
		if ( guy.IsTitan() )
		{
			entity soul = guy.GetTitanSoul()
			if( IsValid( soul ) )
			{
				entity bubbleShield = soul.soul.bubbleShield
				if ( IsValid( bubbleShield ) )
					continue
			}
		}

		array<entity> otherGuys = GetPlayerArray()
		otherGuys.extend( GetNPCArrayOfEnemies( team ) )

		bool failedChecks = false

		foreach ( entity otherGuy in otherGuys )
		{
			// skip dead people
			if ( !IsAlive( otherGuy ) )
				continue

			failedChecks = false

			// don't kill if too close to anything
			if ( Distance( otherGuy.GetOrigin(), guy.GetOrigin() ) < 2000.0 )
				break

			// don't kill if ai or players can see them
			if ( otherGuy.IsPlayer() )
			{
				if ( PlayerCanSee( otherGuy, guy, true, 135 ) )
					break
			}
			else
			{
				if ( otherGuy.CanSee( guy ) )
					break
			}

			// don't kill if they can see any ai
			if ( guy.CanSee( otherGuy ) )
				break

			failedChecks = true
		}

		if ( Distance( guy.GetOrigin(), lastCheckOrigin ) <= 64 ) // assume they're not moving
			failedChecks = true // mark as checks failed

		if ( failedChecks )
			cleanupFailures++
		else
			cleanupFailures--

		lastCheckOrigin = guy.GetOrigin()
	}

	print( "cleaning up bored npc: " + guy + " from team " + guy.GetTeam() )
	HideName( guy ) // prevent their title or health bar from showing
	TakeAllWeapons( guy ) // so they won't have a weapon floating
	guy.SetNoTarget( true ) // disable npc targeting
	guy.SetNoTargetSmartAmmo( true ) // disable smart ammo targeting
	guy.EnableNPCFlag( NPC_IGNORE_ALL ) // disable any sensing
	guy.NotSolid() // disable collision
	// titan being dissolved
	if ( guy.IsTitan() )
	{
		entity soul = guy.GetTitanSoul()
		if( IsValid( soul ) )
		{
			// end any rodeo on it
			ForceTitanRodeoToEnd( guy )
			DisableTitanRodeo( guy )
			// try to hide a cleaning up titan's batteryContainer
			entity batteryContainer = soul.soul.batteryContainer
			if ( IsValid( batteryContainer ) )
				batteryContainer.Hide()
		}
	}
	// reaper being dissolved
	if ( guy.GetClassName() == "npc_super_spectre" )
	{
		if ( guy.ai.activeMinionEntArrayID > 0 )
		{
			// detonate all frag drones they owned
			foreach ( entity ent in GetScriptManagedEntArray( guy.ai.activeMinionEntArrayID ) )
			{
				if ( IsValid( ent ) ) 
				{
					if ( ent.IsNPC() && ent.ai.fragDroneArmed ) // minion may doing a deploy animation, which handled by WaitForFragDroneDeployThenDetonate()
						ent.Signal( "SuicideSpectreExploding" )
					else if ( ent.GetClassName() == "grenade" ) // minion still a grenade
						ent.Destroy()
				}
			}
		}
	}
	guy.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 ) // dissolve them to have better visual
}