untyped // for playersettings work

global function Default_GruntMode_Classes_Init

void function Default_GruntMode_Classes_Init()
{
	PrecacheModel( $"models/humans/grunts/imc_grunt_lmg_helmet.mdl" )
    RegisterAllDefaultClass()
}



//////////////////////////////////////
///// GRUNT CLASS INIT FUNCTIONS /////
//////////////////////////////////////

// grunt classes, GM refers to GruntMode
// maybe we should do a "tolower()" ?
const string GM_ASSAULT_GRUNT_CLASSNAME			= "Assault_Grunt"		// r97, archer and frag
const string GM_HEAVY_GRUNT_CLASSNAME			= "Heavy_Grunt"			// nerfed spitfire and archer
const string GM_RIFLEMAN_GRUNT_CLASSNAME		= "Rifleman_Grunt"		// flatline, archer and frag
const string GM_SHOTGUN_GRUNT_CLASSNAME			= "Shotgun_Grunt"		// eva-8, archer and frag
const string GM_SNIPER_GRUNT_CLASSNAME			= "Sniper_Grunt"		// nerfed dmr, archer and electric smoke
const string GM_ENGINEER_CLASSNAME				= "Engineer"			// l-star, thunderbolt and satchel, one turret in inventory
const string GM_SPECIALIST_GRUNT_CLASSNAME		= "Specialist_Grunt"	// car and mgl, two drones( 15s respawn )
const string GM_SHIELD_CAPTAIN_CLASSNAME		= "Shield_Captain"		// r201, mgl and electric smoke, carrying a particle wall
const string GM_SHOCK_GRUNT_CLASSNAME			= "Shock_Grunt"			// volt, thunderbolt and arc grenade, one arc trap in inventory
const string GM_SPECTRE_CLASSNAME				= "Spectre"				// mastiff, chargerifle, double jumping, no wallclimb
const string GM_SONAR_PULSER_CLASSNAME			= "Sonar_Pulser"		// alternator, chargerifle and double timed pulse blade
const string GM_NINJA_CLASSNAME					= "Ninja"				// no mainweapon, mgl and smoke launcher, regenerating kunai and gravity star
const string GM_BEAST_KING_CLASSNAME			= "Beast_King"			// no mainweapon, sword, high titan damage magnitic arc grenade and prowlers( 10s respawn )
const string GM_JUMPER_CLASSNAME				= "Jumper"				// devotion, mgl, one jumppad usage
const string GM_SHIFTER_CLASSNAME				= "Shifter"				// double-take, thunderbolt and arc grenade, one longer shifter usage
const string GM_RAVENANT_CLASSNAME				= "Ravenant"			// hemlok, chargerifle and satchel, super wallclimb, faster crouchwalk
const string GM_PHASEWALKER_CLASSNAME			= "Phase_Walker"		// r101 and thunderbolt, one portal usage
const string GM_HEAVY_SNIPER_CLASSNAME			= "Heavy_Sniper"		// kraber(anti-titan) and electric smoke
const string GM_RUNNER_CLASSNAME				= "Runner"				// run_and_gun, extended_ammo re45 with less damage falloff and mgl, octane stim( longer stim that costs health )
const string GM_PATH_BUILDER_CLASSNAME			= "Path_Builder"		// unknown weapon, one zipline gun usage(zipline destroys on death)
const string GM_SCOUT_CLASSNAME					= "Scout"				// unknown weapon, one grapple usage
const string GM_FLYER_CLASSNAME					= "Flyer"				// unknown weapon, short duration jetpack
const string GM_ASSASSIN_CLASSNAME				= "Assassin"			// wingman elite, short duration jetpack

void function RegisterAllDefaultClass()
{
	// assault grunt
	GruntMode_RegisterPlayerClass(
		GM_ASSAULT_GRUNT_CLASSNAME,		// classname
		BecomeAssaultGrunt,				// loadout function
		false							// specialist, should this class give more score
	)
	
	// heavy grunt
	GruntMode_RegisterPlayerClass(
		GM_HEAVY_GRUNT_CLASSNAME,		// classname
		BecomeHeavyGrunt,				// loadout function
		false							// specialist, should this class give more score
	)

	// rifleman grunt
	GruntMode_RegisterPlayerClass(
		GM_RIFLEMAN_GRUNT_CLASSNAME,	// classname
		BecomeRiflemanGrunt,			// loadout function
		false							// specialist, should this class give more score
	)

	// shotgun grunt
	GruntMode_RegisterPlayerClass(
		GM_SHOTGUN_GRUNT_CLASSNAME,		// classname
		BecomeShotgunGrunt,				// loadout function
		false							// specialist, should this class give more score
	)

	// sniper grunt
	GruntMode_RegisterPlayerClass(
		GM_SNIPER_GRUNT_CLASSNAME,		// classname
		BecomeSniperGrunt,				// loadout function
		false							// specialist, should this class give more score
	)

	// engineer
	GruntMode_RegisterPlayerClass(
		GM_ENGINEER_CLASSNAME,			// classname
		BecomeEngineer,					// loadout function
		true							// specialist, should this class give more score
	)

	// specialist grunt
	GruntMode_RegisterPlayerClass(
		GM_SPECIALIST_GRUNT_CLASSNAME,	// classname
		BecomeSpecialistGrunt,			// loadout function
		true							// specialist, should this class give more score
	)

	// shield captain
	PrecacheModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl" ) // this is only precached in fd by default
	GruntMode_RegisterPlayerClass(
		GM_SHIELD_CAPTAIN_CLASSNAME,	// classname
		BecomeShieldCaptain,			// loadout function
		true							// specialist, should this class give more score
	)

	// shock grunt
	GruntMode_RegisterPlayerClass(
		GM_SHOCK_GRUNT_CLASSNAME,		// classname
		BecomeShockGrunt,				// loadout function
		true							// specialist, should this class give more score
	)

	// spectre
	GruntMode_RegisterPlayerClass(
		GM_SPECTRE_CLASSNAME,			// classname
		BecomeSpectre,					// loadout function
		true							// specialist, should this class give more score
	)

	// sonar pulser
	GruntMode_RegisterPlayerClass(
		GM_SONAR_PULSER_CLASSNAME,		// classname
		BecomeSonarPulser,				// loadout function
		false							// specialist, should this class give more score
	)

	/* // temp remove melee classes since we've got enough classes?
	// ninja
	GruntMode_RegisterPlayerClass(
		GM_NINJA_CLASSNAME,				// classname
		BecomeNinja,					// loadout function
		true							// specialist, should this class give more score
	)
	
    // beast king
	GruntMode_RegisterPlayerClass(
		GM_BEAST_KING_CLASSNAME,		// classname
		BecomeBeastKing,				// loadout function
		true							// specialist, should this class give more score
	)
	*/

    // jumper
	GruntMode_RegisterPlayerClass(
		GM_JUMPER_CLASSNAME,			// classname
		BecomeJumper,					// loadout function
		false							// specialist, should this class give more score
	)

    // shifter
	GruntMode_RegisterPlayerClass(
		GM_SHIFTER_CLASSNAME,			// classname
		BecomeShifter,					// loadout function
		false							// specialist, should this class give more score
	)

	// ravenant
	GruntMode_RegisterPlayerClass(
		GM_RAVENANT_CLASSNAME,			// classname
		BecomeRavenant,					// loadout function
		true							// specialist, should this class give more score
	)

	// phase walker
	GruntMode_RegisterPlayerClass(
		GM_PHASEWALKER_CLASSNAME,		// classname
		BecomePhaseWalker,				// loadout function
		true							// specialist, should this class give more score
	)

	// heavy sniper
	GruntMode_RegisterPlayerClass(
		GM_HEAVY_SNIPER_CLASSNAME,		// classname
		BecomeHeavySniper,				// loadout function
		false							// specialist, should this class give more score
	)

	// runner
	GruntMode_RegisterPlayerClass(
		GM_RUNNER_CLASSNAME,			// classname
		BecomeRunner,					// loadout function
		false							// specialist, should this class give more score
	)

	// path builder
	GruntMode_RegisterPlayerClass(
		GM_PATH_BUILDER_CLASSNAME,		// classname
		BecomePathBuilder,				// loadout function
		false							// specialist, should this class give more score
	)

	// scout
	GruntMode_RegisterPlayerClass(
		GM_SCOUT_CLASSNAME,				// classname
		BecomeScout,					// loadout function
		false							// specialist, should this class give more score
	)

	// flyer
	GruntMode_RegisterPlayerClass(
		GM_FLYER_CLASSNAME,				// classname
		BecomeFlyer,					// loadout function
		true							// specialist, should this class give more score
	)

	// assassin
	GruntMode_RegisterPlayerClass(
		GM_ASSASSIN_CLASSNAME,			// classname
		BecomeAssassin,					// loadout function
		false							// specialist, should this class give more score
	)
}

//////////////////////////////////////////
///// GRUNT CLASS INIT FUNCTIONS END /////
//////////////////////////////////////////



///////////////////////////////////////////
///// DEFAULT CLASS LOADOUT FUNCTIONS /////
///////////////////////////////////////////

void function BecomeAssaultGrunt( entity player )
{
	player.SetPlayerSettings( "pilot_grapple_male" ) // have a better pov model

	SimpleClassLoadout( 
		player,
		"mp_weapon_r97",													// primary weapon
		"mp_weapon_rocket_launcher",										// secondary weapon
		"mp_weapon_frag_grenade",											// grenade
		$"models/humans/grunts/imc_grunt_smg.mdl",							// imc player model
		$"models/humans/grunts/mlt_grunt_smg.mdl",							// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"突擊步兵",																// title
		"以突擊步兵重生"												 		// respawn notification
	)

	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	// mlt specific pov camo
	ApplyMLTGruntCamo( player )
}

void function BecomeHeavyGrunt( entity player )
{
	player.SetPlayerSettings( "pilot_grapple_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_lmg",													// primary weapon
		"mp_weapon_rocket_launcher",										// secondary weapon
		"",																	// grenade
		$"models/humans/grunts/imc_grunt_lmg.mdl",							// imc player model
		$"models/humans/grunts/mlt_grunt_lmg.mdl",							// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"重裝步兵",																// title
		"以重裝步兵重生"												 		// respawn notification
	)

	player.GetMainWeapons()[0].AddMod( "gm_heavy" ) // nerfed spitfire
	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	// mlt specific pov camo
	ApplyMLTGruntCamo( player )
}

void function BecomeRiflemanGrunt( entity player )
{
	player.SetPlayerSettings( "pilot_grapple_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_vinson",													// primary weapon
		"mp_weapon_rocket_launcher",										// secondary weapon
		"mp_weapon_frag_grenade",											// grenade
		$"models/humans/grunts/imc_grunt_rifle.mdl",						// imc player model
		$"models/humans/grunts/mlt_grunt_rifle.mdl",						// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"步槍兵",																// title
		"以步槍兵重生"												 			// respawn notification
	)

	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	// mlt specific pov camo
	ApplyMLTGruntCamo( player )
}

void function BecomeShotgunGrunt( entity player )
{
	player.SetPlayerSettings( "pilot_grapple_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_shotgun",												// primary weapon
		"mp_weapon_rocket_launcher",										// secondary weapon
		"mp_weapon_frag_grenade",											// grenade
		$"models/humans/grunts/imc_grunt_shotgun.mdl",						// imc player model
		$"models/humans/grunts/mlt_grunt_shotgun.mdl",						// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"霰彈步兵",																// title
		"以霰彈步兵重生"												 		// respawn notification
	)

	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	// mlt specific pov camo
	ApplyMLTGruntCamo( player )
}

void function BecomeSniperGrunt( entity player )
{
	player.SetPlayerSettings( "pilot_grapple_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_dmr",													// primary weapon
		"mp_weapon_rocket_launcher",										// secondary weapon
		"mp_weapon_grenade_electric_smoke",									// grenade
		$"models/humans/grunts/imc_grunt_lmg.mdl",							// imc player model
		$"models/humans/grunts/mlt_grunt_lmg.mdl",							// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"狙擊步兵",																// title
		"以狙擊步兵重生"												 		// respawn notification
	)

	player.GetMainWeapons()[0].AddMod( "gm_sniper" ) // nerfed dmr
	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it
	
	// mlt specific pov camo
	ApplyMLTGruntCamo( player )
}

void function BecomeEngineer( entity player )
{
	player.SetPlayerSettings( "pilot_heavy_female" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_lstar",													// primary weapon
		"mp_weapon_arc_launcher",											// secondary weapon
		"mp_weapon_satchel",												// grenade
		$"models/humans/pilots/pilot_heavy_roog_f.mdl",						// imc player model
		$"models/humans/pilots/pilot_heavy_roog_f.mdl",						// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"工程師",																// title
		"以工程師重生：携帶一架炮臺"											// respawn notification
	)

	player.GetMeleeWeapon().AddMod( "fake_human_melee" ) // model doesn't have grunt melee activity

	PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_ap_turret_weapon" ) // give one usage of turret
	thread TrackEngineerDeath( player ) // death will clear player's turret item

	CreateIMCGruntHelmetForPlayer( player ) // give pilot model a grunt helmet
}

void function TrackEngineerDeath( entity player )
{
	player.EndSignal( "OnDestroy" )

	player.WaitSignal( "OnDeath" )
	PlayerInventory_TakeAllInventoryItems( player ) // clear inventory

	// kill player's existing turrets upon death
	foreach( entity turret in GetNPCArrayByClass( "npc_turret_sentry" ) )
	{
		if ( turret.GetBossPlayer() == player )
		{
			if ( IsAlive( turret ) ) // don't kill a dying turret
				turret.Die() // kill the turret
		}
	}
}

void function BecomeSpecialistGrunt( entity player )
{
	player.SetPlayerSettings( "pilot_light_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_car",													// primary weapon
		"mp_weapon_mgl",													// secondary weapon
		"",																	// grenade
		$"models/humans/pilots/pilot_light_ged_m.mdl",						// imc player model
		$"models/humans/pilots/pilot_light_ged_m.mdl",						// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"特種步兵",																// title
		"以特種步兵重生：携帶一架無人機(每15s重生)，按 USE 召喚至指定位置"	// respawn notification
	)

	player.GetMainWeapons()[0].AddMod( "gm_specialist" ) // nerfed car
	player.GetMeleeWeapon().AddMod( "fake_human_melee" ) // model doesn't have grunt melee activity
	
	//if( PlayerHasPassive( player, ePassives.PAS_ORDNANCE_PACK ) ) // prevent regen ticks
	//	TakePassive( player, ePassives.PAS_ORDNANCE_PACK )
	// drone spawning ability( two times usage ), but we can't use drone_spawner_anim since pilot_light_ged don't have that animation
	//player.GiveOffhandWeapon( "mp_weapon_frag_drone", OFFHAND_SPECIAL, ["drone_spawner"] )
	//thread TrackSpecialistGruntDeath( player ) // death will clear player's drones

	// doing a better check now!
	thread SpecialistGruntThink( player )
}

/* // using drone spawner to track this
void function TrackSpecialistGruntDeath( entity player )
{
	player.EndSignal( "OnDestroy" )

	player.WaitSignal( "OnDeath" )

	// kill player's existing drones upon death
	foreach( entity drone in GetNPCArrayByClass( "npc_drone" ) )
	{
		if ( drone.GetBossPlayer() == player )
			drone.Die() // kill the drone
	}
}
*/

struct SpecialistGruntStruct
{
	array<entity> ownedDrones
	float lastRecallTime
	float lastNotifyTime
}

struct
{
	table< entity, SpecialistGruntStruct > classTable
} specialistGrunt

const float SPECIALIST_GRUNT_RECALL_RANGE = 600
const float SPECIALIST_GRUNT_DRONE_COOLDOWN = 15.0
const int SPECIALIST_GRUNT_DRONE_COUNT = 1 // was 3
const bool SPECIALIST_GRUNT_DRONE_RESPAWN = true // was false
const int SPECIALIST_GRUNT_DRONE_HEALTH = 140 // was 90 with 3 drones
const float SPECIALIST_GRUNT_RECALL_COOLDOWN = 3.0
const float SPECIALIST_GRUNT_NOTIFICATION_COOLDOWN = 2.0

void function SpecialistGruntThink( entity player )
{
	player.EndSignal( "OnDestroy" )

	// init this class
	if ( !( player in specialistGrunt.classTable ) )
	{
		SpecialistGruntStruct emptyStruct
		specialistGrunt.classTable[player] <- emptyStruct
	}

	// make recall available
	specialistGrunt.classTable[player].lastRecallTime = Time() - SPECIALIST_GRUNT_RECALL_COOLDOWN
	specialistGrunt.classTable[player].lastNotifyTime = Time() - SPECIALIST_GRUNT_NOTIFICATION_COOLDOWN

    AddButtonPressedPlayerInputCallback( player, IN_USE, SpecialistGruntRecallDrones )
    AddButtonPressedPlayerInputCallback( player, IN_USE_AND_RELOAD, SpecialistGruntRecallDrones )
    
    OnThreadEnd(
        function(): ( player )
        {
            if ( IsValid( player ) )
            {
                RemoveButtonPressedPlayerInputCallback( player, IN_USE, SpecialistGruntRecallDrones )
                RemoveButtonPressedPlayerInputCallback( player, IN_USE_AND_RELOAD, SpecialistGruntRecallDrones )
            }
        }
    )

	thread SpecialistGruntDronesSpawner( player )

	player.WaitSignal( "OnDeath" ) // wait for player's death
}

void function SpecialistGruntRecallDrones( entity player )
{
    array<entity> drones = specialistGrunt.classTable[player].ownedDrones
    float lastRecallTime = specialistGrunt.classTable[player].lastRecallTime
	float lastNotifyTime = specialistGrunt.classTable[player].lastNotifyTime
    
	bool dronesLeft = false
	foreach( entity drone in drones )
	{
		if ( IsAlive( drone ) ) // at least one drone alive
			dronesLeft = true
	}

	if ( !dronesLeft )
	{
		if ( Time() - lastNotifyTime >= SPECIALIST_GRUNT_NOTIFICATION_COOLDOWN ) // notification cooldown
		{
			SendHudMessage( player, "無人機已全部死亡",  -1, -0.3, 255, 255, 0, 255, 0.15, 6, 1 )
			specialistGrunt.classTable[player].lastNotifyTime = Time() // update
		}
		return
	}

	if ( Time() - lastRecallTime < SPECIALIST_GRUNT_RECALL_COOLDOWN ) // recently recalled!
	{
		if ( Time() - lastNotifyTime >= SPECIALIST_GRUNT_NOTIFICATION_COOLDOWN ) // notification cooldown
		{
			SendHudMessage( player, "不可連續召喚",  -1, -0.3, 255, 255, 0, 255, 0.15, 6, 1 )
			specialistGrunt.classTable[player].lastNotifyTime = Time() // update
		}
		return
	}

	vector targetPos
	vector targetAngs = < 0, player.EyeAngles().y, 0 > // get player's looking yaw
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * SPECIALIST_GRUNT_RECALL_RANGE, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	targetPos = traceResult.endPos

	foreach( entity drone in drones )
	{
		if ( !IsValid( drone ) ) // not a valid drone!!
			continue

		// leave a fx on original place, don't play disappear sound
		PlayDroneDisappearFX( drone.GetOrigin() )
		//EmitSoundAtPosition( TEAM_UNASSIGNED, drone.GetOrigin(), SHIFTER_START_SOUND_3P )

		// play another fx on drone, only play one sound
		PlayDroneAppearFX( drone )
		drone.SetOrigin( targetPos )
		drone.SetAngles( targetAngs )
		
	}

	// only play one sound
	EmitSoundAtPosition( TEAM_UNASSIGNED, targetPos, SHIFTER_END_SOUND_3P )
	specialistGrunt.classTable[player].lastRecallTime = Time() // set in cooldown!
}

entity function PlayDroneDisappearFX( vector origin )
{
	asset effect = $"P_phase_shift_main"

	return PlayFX( effect, origin, < 0,0,0 > )
}

entity function PlayDroneAppearFX( entity ent )
{
	asset effect = $"P_phase_shift_main"

	return PlayFXOnEntity( effect, ent )
}

void function SpecialistGruntDronesSpawner( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

    // wait for player landing
    waitthread WaitForPlayerDropBeforeSpawnDrones( player )

	for ( int i = 0; i < SPECIALIST_GRUNT_DRONE_COUNT; i++ )
		CreateDroneForSpecialistGrunt( player ) // create respawning drones
	// first spawn, play one sound
	EmitSoundAtPosition( TEAM_UNASSIGNED, player.GetOrigin(), SHIFTER_END_SOUND_3P )

	// OnThreadEnd() only triggers after delay, since this function won't do anything if player dies before drones spawn
	OnThreadEnd(
		function(): ( player )
		{
			array<entity> gruntDrones = specialistGrunt.classTable[player].ownedDrones
			foreach( entity drone in gruntDrones )
			{
				if ( IsAlive( drone ) )
					drone.Die()
			}
        }
	)

	WaitForever() // wait until player's death
}

entity function CreateDroneForSpecialistGrunt( entity player )
{
	entity drone = CreateNPC( "npc_drone", player.GetTeam(), player.GetOrigin(), player.GetAngles() )
	
	array<string> validDroneTypes = 
	[ 
		"npc_drone_beam", 
		"npc_drone_rocket", 
		"npc_drone_plasma" 
	]
	string dronename = validDroneTypes[ RandomInt( validDroneTypes.len() ) ]
	
	SetSpawnOption_AISettings( drone, dronename )
	DispatchSpawn( drone )
	// drone's health
	drone.SetMaxHealth( SPECIALIST_GRUNT_DRONE_HEALTH )
	drone.SetHealth( SPECIALIST_GRUNT_DRONE_HEALTH )

	drone.SetOwner( player )
	drone.SetBossPlayer( player )
	// don't follow!! the drone will lost target
	//NPCFollowsPlayer( drone, player )
	Highlight_SetOwnedHighlight( drone, "friendly_ai" )

	thread DisableDroneSound( drone ) // disable their annoying sounds!
    // for player recalling their drones
    specialistGrunt.classTable[player].ownedDrones.append( drone )

	SendHudMessage( player, "無人機已重生",  -1, -0.3, 255, 255, 0, 255, 0.15, 6, 1 )
	PlayDroneAppearFX( drone ) // phase out effect
	if ( SPECIALIST_GRUNT_DRONE_RESPAWN )
		thread TrackPlayerDroneRespawn( player, drone )

	return drone
}

void function TrackPlayerDroneRespawn( entity player, entity drone )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	drone.WaitSignal( "OnDeath", "OnDestroy" )
	ArrayRemoveInvalid( specialistGrunt.classTable[player].ownedDrones )
	if ( IsValid( drone ) )
		specialistGrunt.classTable[player].ownedDrones.removebyvalue( drone )
	bool hasDroneAlive = false
	foreach ( entity drone in specialistGrunt.classTable[player].ownedDrones )
	{
		if ( IsAlive( drone ) )
		{
			hasDroneAlive = true
			break
		}
	}
	if ( !hasDroneAlive ) // drones are dead
		SendHudMessage( player, "無人機已全部死亡",  -1, -0.3, 255, 255, 0, 255, 0.15, 6, 1 )
	wait SPECIALIST_GRUNT_DRONE_COOLDOWN
	CreateDroneForSpecialistGrunt( player )
}

void function DisableDroneSound( entity drone )
{
	drone.EndSignal( "OnDestroy" )
	
	WaitFrame()
	StopSoundOnEntity( drone, "Drone_Mvmt_Hover_Hero" )
	StopSoundOnEntity( drone, "Drone_Mvmt_Hover" )
}

void function WaitForPlayerDropBeforeSpawnDrones( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	WaitFrame() // wait this frame before player actually being set parented
	while( IsValid( player.GetParent() ) ) // spawning from dropship or droppod
		WaitFrame()
}

const int SHIELD_CAPTAIN_SHIELD_HEALTH = 100 // was 150
void function BecomeShieldCaptain( entity player )
{
	player.SetPlayerSettings( "pilot_geist_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_rspn101",												// primary weapon
		"mp_weapon_mgl",													// secondary weapon
		"mp_weapon_grenade_electric_smoke",									// grenade
		$"models/humans/grunts/imc_grunt_shield_captain.mdl",				// imc player model
		$"models/humans/grunts/imc_grunt_shield_captain.mdl",				// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"盾牌隊長",																// title
		"以盾牌隊長重生：擁有一面緩慢移動的護盾"									// respawn notification
	)

	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it
	DeathPackage_RemoveEntityHeadshotFXOverride( player ) // shield captains use pilot headshot fx

	thread WaitForShieldCaptainPlayerDrop( player )
}

void function WaitForShieldCaptainPlayerDrop( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	WaitFrame() // wait for player being set into dropship
	while( IsValid( player.GetParent() ) )
		WaitFrame() // wait for player leave dropship or droppod

	thread ActivatePersonalShield( player, SHIELD_CAPTAIN_SHIELD_HEALTH ) // activate mobile shield
}

void function BecomeShockGrunt( entity player )
{
	player.SetPlayerSettings( "pilot_stalker_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_hemlok_smg",												// primary weapon
		"mp_weapon_arc_launcher",											// secondary weapon
		"mp_weapon_grenade_emp",											// grenade
		$"models/humans/pilots/pilot_medium_stalker_m.mdl",					// imc player model
		$"models/humans/pilots/pilot_medium_stalker_m.mdl",					// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"電擊步兵",																// title
		"以電擊步兵重生：携帶一個電弧陷阱"											// respawn notification
	)

	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	player.GiveOffhandWeapon( "mp_weapon_arc_trap", OFFHAND_INVENTORY, ["limited_arc_trap", "gm_shock_grunt"] ) // 2 activation arc trap, destroys itself on owner death

	CreateIMCGruntHelmetForPlayer( player ) // give pilot model a grunt helmet
}

void function BecomeSpectre( entity player )
{
	thread WaitForSpectrePlayerDrop( player ) // wait for player leaving dropship
}

void function WaitForSpectrePlayerDrop( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	
	player.SetPlayerSettings( "pilot_nomad_male" ) // have a better pov model, also temp use this model
	
	if ( GetGameState() < eGameState.Playing ) // prematch?
	{
		WaitFrame() // wait for player being set into dropship
		while( IsValid( player.GetParent() ) )
			WaitFrame() // wait for player leave dropship
	}

	SimpleClassLoadout(  
		player,
		"mp_weapon_mastiff",												// primary weapon
		"",																	// secondary weapon
		"",																	// grenade
		$"",																// imc player model
		$"",																// mlt player model
		["normal_wallclimb"],												// class mods
		"幽靈戰士",																// title
		"以幽靈戰士重生：可以二段跳躍"												// respawn notification
	)

	//player.GiveWeapon( "mp_weapon_defender", ["at_low_stockpile"] ) // 15 stockpile charge rifle
	player.GiveWeapon( "mp_weapon_defender", ["quick_charge"] ) // quick-charge charge rifle
	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	//WaitFrame() // wait a frame. was waiting for altpilot_recoverFromSpectre(), but the function has been removed!
	player.SetModel( $"models/robots/spectre/imc_spectre.mdl" ) // safe to set model
	//player.SetTargetInfoIcon( $"ui/targetinfo_spectre_bounty" ) // will appear an error
}

void function BecomeSonarPulser( entity player )
{
	player.SetPlayerSettings( "pilot_medium_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_alternator_smg",											// primary weapon
		"",																	// secondary weapon
		"",																	// grenade
		$"models/humans/pilots/pilot_medium_reaper_m.mdl",					// imc player model
		$"models/humans/pilots/pilot_medium_reaper_m.mdl",					// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"聲納步兵",																// title
		"以聲納步兵重生"														// respawn notification
	)

	//player.GiveWeapon( "mp_weapon_defender", ["at_low_stockpile"] ) // 15 stockpile charge rifle
	player.GiveWeapon( "mp_weapon_defender", ["quick_charge"] ) // quick-charge charge rifle
	player.GiveOffhandWeapon( "mp_weapon_grenade_sonar", OFFHAND_SPECIAL, ["grunt_mode", "gm_sonarpulser"] ) // double timed pulse blade
	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	CreateIMCGruntHelmetForPlayer( player ) // give pilot model a grunt helmet
}

void function BecomeNinja( entity player )
{
	player.SetPlayerSettings( "pilot_grapple_female" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"",																	// primary weapon
		"",																	// secondary weapon
		"",																	// grenade
		$"models/humans/pilots/pilot_medium_geist_f.mdl",					// imc player model
		$"models/humans/pilots/pilot_medium_geist_f.mdl",					// mlt player model
		["disable_doublejump"],												// class mods
		"忍者",																	// title
		"以忍者兵種重生：無主武器，生命較高，可以跑墻。携帶煙霧發射器，投擲物會自動回復"		// respawn notification
	)

	player.SetMaxHealth( 150 ) // higher health
	player.SetHealth( 150 ) // higher health
	
	array<entity> ninjaWeapons
	array<string> ninjaOffhands
	ninjaWeapons.append( player.GiveWeapon( "mp_weapon_arc_launcher", ["smoke_launcher", "at_low_stockpile"] ) ) //4 stockple smoke launcher
	ninjaWeapons.append( player.GiveWeapon( "mp_weapon_mgl", ["extended_ammo"] ) )
	// offhand weapons won't return themselves, saving classname is enough
	player.GiveOffhandWeapon( "mp_weapon_grenade_sonar", OFFHAND_SPECIAL, ["ninja_projectile"] ) // 2s cooldown instant kill projectile
	ninjaOffhands.append( "mp_weapon_grenade_sonar" )
	player.GiveOffhandWeapon( "mp_weapon_grenade_gravity", OFFHAND_ORDNANCE, ["pas_ordnance_pack"] ) // gravity star, was ["ninja_projectile"]: 2s cooldown instant kill projectile, bit slower than kunai
	ninjaOffhands.append( "mp_weapon_grenade_gravity" )
	// melee weapon
	entity meleeWeapon = player.GetMeleeWeapon()
	if ( IsValid( meleeWeapon ) )
		player.TakeWeaponNow( meleeWeapon.GetWeaponClassName() )
	player.GiveOffhandWeapon( "melee_pilot_kunai", OFFHAND_MELEE, ["grunt_mode"] )
	ninjaOffhands.append( "melee_pilot_kunai" )
	thread NinjaForcedWeapon( player, ninjaWeapons, ninjaOffhands ) // force ninja use given weapons
}

void function NinjaForcedWeapon( entity player, array<entity> allowedWeapons, array<string> allowedOffhands )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	while( true )
	{
		WaitFrame()
		entity activeWeapon = player.GetActiveWeapon()
		if ( !IsValid( activeWeapon ) ) // not holding a weapon
			continue
		
		string className = activeWeapon.GetWeaponClassName()
		if ( !allowedWeapons.contains( activeWeapon ) && !allowedOffhands.contains( className ) ) // player gets a weapon from other source?
		{
			player.TakeWeaponNow( activeWeapon.GetWeaponClassName() ) // take it!
			if ( player.GetMainWeapons().len() > 0 ) // has another weapon
				player.SetActiveWeaponBySlot( 0 ) // swap to it
			//SendHudMessage( player, "忍者不可以使用其他武器",  -1, -0.3, 255, 255, 255, 255, 0.15, 6, 1 )
		}
	}
}

void function BecomeBeastKing( entity player )
{
	player.SetPlayerSettings( "pilot_geist_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"",																	// primary weapon
		"",																	// secondary weapon
		"",																	// grenade
		$"models/humans/pilots/pilot_heavy_drex_m.mdl",					    // imc player model
		$"models/humans/pilots/pilot_heavy_drex_m.mdl",					    // mlt player model
		["normal_wallclimb"],												// class mods
		"馴獸師",																// title
		"以馴獸師重生：携帶一隻獵獸(每10s重生)，按 USE 召喚至指定位置。生命略高，可以二段跳躍。無主武器"				    // respawn notification
	)
	
    player.SetMaxHealth( 125 ) // higher health
	player.SetHealth( 125 ) // higher health

	array<string> beastKingOffhands
	player.GiveOffhandWeapon( "mp_weapon_grenade_emp", OFFHAND_ORDNANCE, ["gm_beastking", "burn_mod_emp_grenade"] ) // regenerating emp grenade, high heavyarmor damage with burnmod, is good
	beastKingOffhands.append( "mp_weapon_grenade_emp" )
	// melee weapon
	entity meleeWeapon = player.GetMeleeWeapon()
	if ( IsValid( meleeWeapon ) )
		player.TakeWeaponNow( meleeWeapon.GetWeaponClassName() )
	player.GiveOffhandWeapon( "melee_pilot_sword", OFFHAND_MELEE, ["allow_as_primary", "gm_beastking"] ) // was having "grunt_mode", it's now oneshot kill sword
	player.SetActiveWeaponByName( "melee_pilot_sword" ) // swap to it
	beastKingOffhands.append( "melee_pilot_sword" )

	thread BeastKingThink( player, beastKingOffhands ) // for beast king respawning prowlers and limit weapon
}

struct BeastKingStruct
{
	entity ownedProwler
	float lastRecallTime
	float lastNotifyTime
}

struct
{
	table< entity, BeastKingStruct > classTable
} beastKing

const float BEAST_KING_PROWLER_COOLDOWN = 10.0
const bool BEAST_KING_PROWLER_RESPAWN = true
const float BEAST_KING_RECALL_RANGE = 750
const float BEAST_KING_RECALL_COOLDOWN = 2.0
const float BEAST_KING_NOTIFICATION_COOLDOWN = 2.0
const int BEAST_KING_PROWLER_HEALTH = 280 // was 380, 100 more than normal prowlers

void function BeastKingThink( entity player, array<string> allowedOffhands )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	// init this class
	if ( !( player in beastKing.classTable ) )
	{
		BeastKingStruct emptyStruct
		beastKing.classTable[player] <- emptyStruct
	}

	// make recall available
	beastKing.classTable[player].lastRecallTime = Time() - BEAST_KING_RECALL_COOLDOWN
	beastKing.classTable[player].lastNotifyTime = Time() - BEAST_KING_NOTIFICATION_COOLDOWN

    AddButtonPressedPlayerInputCallback( player, IN_USE, BeastKingRecallProwler )
    AddButtonPressedPlayerInputCallback( player, IN_USE_AND_RELOAD, BeastKingRecallProwler )
    
    OnThreadEnd(
        function(): ( player )
        {
            if ( IsValid( player ) )
            {
                RemoveButtonPressedPlayerInputCallback( player, IN_USE, BeastKingRecallProwler )
                RemoveButtonPressedPlayerInputCallback( player, IN_USE_AND_RELOAD, BeastKingRecallProwler )
            }
        }
    )

	thread BeastKingProwlerSpawner( player )
	while( true )
	{
		WaitFrame()
		CheckBeastKingWeapon( player, allowedOffhands )
	}
}

void function BeastKingRecallProwler( entity player )
{
    entity prowler = beastKing.classTable[player].ownedProwler
    float lastRecallTime = beastKing.classTable[player].lastRecallTime
	float lastNotifyTime = beastKing.classTable[player].lastNotifyTime
    
	if ( !IsAlive( prowler ) ) // not alive
    {
		if ( Time() - lastNotifyTime >= BEAST_KING_NOTIFICATION_COOLDOWN ) // notification cooldown
		{
        	SendHudMessage( player, "獵獸已死亡",  -1, -0.3, 255, 255, 0, 255, 0.15, 6, 1 )
			beastKing.classTable[player].lastNotifyTime = Time() // update
		}
        return
    }
    if ( Time() - lastRecallTime < BEAST_KING_RECALL_COOLDOWN ) // recently recalled!
    {
		if ( Time() - lastNotifyTime >= BEAST_KING_NOTIFICATION_COOLDOWN ) // notification cooldown
		{
        	SendHudMessage( player, "不可連續召喚",  -1, -0.3, 255, 255, 0, 255, 0.15, 6, 1 )
			beastKing.classTable[player].lastNotifyTime = Time() // update
		}
        return
    }
    
    vector targetPos
    vector targetAngs = < 0, player.EyeAngles().y, 0 > // get player's looking yaw
    TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * BEAST_KING_RECALL_RANGE, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
    targetPos = traceResult.endPos

    // leave a fx on original place
    PlayProwlerDisappearFX( prowler.GetOrigin() )

    // play another fx on prowler
    PlayProwlerAppearFX( prowler )
    prowler.SetOrigin( targetPos )
    prowler.SetAngles( targetAngs )
    beastKing.classTable[player].lastRecallTime = Time() // set in cooldown!
}

entity function PlayProwlerDisappearFX( vector origin )
{
	asset effect = $"P_phase_shift_main"
	EmitSoundAtPosition( TEAM_UNASSIGNED, origin, SHIFTER_START_SOUND_3P )

	return PlayFX( effect, origin, < 0,0,0 > )
}

entity function PlayProwlerAppearFX( entity ent )
{
	asset effect = $"P_phase_shift_main"
	EmitSoundOnEntity( ent, SHIFTER_END_SOUND_3P )

	return PlayFXOnEntity( effect, ent )
}

void function BeastKingProwlerSpawner( entity player, float delay = 0.0 ) // the delay is for respawning prowlers
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	if ( delay > 0 )
		wait delay

    // wait for player landing
    waitthread WaitForPlayerDropBeforeSpawnProwler( player )
	entity prowler = CreateProwlerForBeastKing( player )
    prowler.EndSignal( "OnDestroy" )
    prowler.EndSignal( "OnDeath" )

	// OnThreadEnd() only triggers after delay, since this function won't do anything if player dies before prowler respawn
	OnThreadEnd(
		function(): ( player, prowler )
		{
			if ( !IsAlive( player ) )
			{
				if ( IsAlive( prowler ) )
					prowler.Die()
			}
			else if ( !IsAlive( prowler ) ) // player still alive but prowler dead
            {
                SendHudMessage( player, "獵獸已死亡",  -1, -0.3, 255, 255, 0, 255, 0.15, 6, 1 )
				if ( BEAST_KING_PROWLER_RESPAWN )
					thread BeastKingProwlerSpawner( player, BEAST_KING_PROWLER_COOLDOWN ) // 10s for spawning another prowler
            }
        }
	)

	prowler.WaitSignal( "OnDeath" ) // wait for prowler death
}

void function WaitForPlayerDropBeforeSpawnProwler( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	WaitFrame() // wait this frame before player actually being set parented
	while( IsValid( player.GetParent() ) )
		WaitFrame()
}

entity function CreateProwlerForBeastKing( entity player )
{
	entity prowler = CreateNPC( "npc_prowler", player.GetTeam(), player.GetOrigin(), player.GetAngles() )
	SetSpawnOption_AISettings( prowler, "npc_prowler" )
	prowler.SetMaxHealth( BEAST_KING_PROWLER_HEALTH )
	prowler.SetHealth( BEAST_KING_PROWLER_HEALTH )
	DispatchSpawn( prowler )

	prowler.SetOwner( player )
	prowler.SetBossPlayer( player )
	// don't follow!! the prowler will lost target
	//NPCFollowsPlayer( prowler, player )
	Highlight_SetOwnedHighlight( prowler, "friendly_ai" )
	// so they won't block teammates
	prowler.kv.CollisionGroup = TRACE_COLLISION_GROUP_PLAYER

    beastKing.classTable[player].ownedProwler = prowler
    beastKing.classTable[player].lastRecallTime = Time() - BEAST_KING_RECALL_COOLDOWN // make recall valid
    SendHudMessage( player, "獵獸已重生",  -1, -0.3, 255, 255, 0, 255, 0.15, 6, 1 )

	PlayProwlerAppearFX( prowler ) // phase out effect

	return prowler
}

void function CheckBeastKingWeapon( entity player, array<string> allowedOffhands )
{
	entity activeWeapon = player.GetActiveWeapon()
	if ( !IsValid( activeWeapon ) ) // not holding a weapon
		return
	
	string className = activeWeapon.GetWeaponClassName()
	if ( !allowedOffhands.contains( className ) ) // player gets a weapon from other source?
	{
		player.TakeWeaponNow( activeWeapon.GetWeaponClassName() ) // take it!
		player.SetActiveWeaponByName( "melee_pilot_sword" ) // swap to melee
		//SendHudMessage( player, "驯兽师不可以使用其他武器",  -1, -0.3, 255, 255, 255, 255, 0.15, 6, 1 )
	}
}

void function BecomeJumper( entity player )
{
    player.SetPlayerSettings( "pilot_nomad_female" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_esaw",												    // primary weapon
		"mp_weapon_mgl",													// secondary weapon
		"",											                        // grenade
		$"models/humans/pilots/pilot_light_jester_f.mdl",					// imc player model
		$"models/humans/pilots/pilot_light_jester_f.mdl",				    // mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"機動兵",																// title
		"以機動兵種重生：可以部署一個跳板"						                	// respawn notification
	)

    player.GiveOffhandWeapon( "mp_ability_heal", OFFHAND_SPECIAL, ["grunt_mode", "jump_pad", "infinite_jump_pad", "gm_jumper"] )
	player.GetMeleeWeapon().AddMod( "fake_human_melee" ) // model doesn't have grunt melee activity

	player.SetSkin( 1 )
	player.SetCamo( 14 ) // green
}

void function BecomeShifter( entity player )
{
    player.SetPlayerSettings( "pilot_light_female" ) // have a better pov model

	// not using the model $"models/Humans/heroes/imc_hero_ash.mdl" since we've assigned it to boss titans
	SimpleClassLoadout(  
		player,
		"mp_weapon_doubletake",												// primary weapon
		"mp_weapon_arc_launcher",											// secondary weapon
		"",											                        // grenade
		$"models/humans/pilots/pilot_light_ged_f.mdl",					    // imc player model
		$"models/humans/pilots/pilot_light_ged_f.mdl",					    // mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"相位兵",															// title
        "以相位兵種重生：可使用一次長時間相位"						            // respawn notification
	)

	player.GetMainWeapons()[0].AddMod( "tripletake" ) // visualize middle bullet(client prediction required)
    player.GetMainWeapons()[0].AddMod( "gm_shifter" ) // nerfed doubletake
    player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_SPECIAL, ["grunt_mode", "gm_shifter"] )
	player.GetMeleeWeapon().AddMod( "fake_human_melee" ) // model doesn't have grunt melee activity

	player.SetSkin( 1 )
	player.SetCamo( 30 ) // black
}

void function BecomeRavenant( entity player )
{
	player.SetPlayerSettings( "pilot_nomad_male" ) // have a better pov model
	player.SetPlayerSettingPosMods( PLAYERPOSE_CROUCHING, ["coliseum"] ) // 160 crouchwalk speed

	SimpleClassLoadout(  
		player,
		"mp_weapon_hemlok",													// primary weapon
		"mp_weapon_rocket_launcher",										// secondary weapon
		"mp_weapon_satchel",											    // grenade
		$"models/humans/pilots/pilot_light_jester_m.mdl",					// imc player model
		$"models/humans/pilots/pilot_light_jester_m.mdl",					// mlt player model
		["disable_doublejump", "amped_wallclimb", "courch_walk_boost", "pas_wall_runner"],		// class mods
		"亡靈",																// title
        "以亡靈重生：擁有更快的攀爬速度和更高的攀爬高度，下蹲行走不會減速"				// respawn notification
	)

	player.GetMeleeWeapon().AddMod( "fake_human_melee" ) // model doesn't have grunt melee activity

	player.SetSkin( 1 )
	player.SetCamo( 154 ) // red line
}

void function BecomePhaseWalker( entity player )
{
	player.SetPlayerSettings( "pilot_light_female" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_rspn101_og",												// primary weapon
		"mp_weapon_arc_launcher",											// secondary weapon
		"",											    // grenade
		$"models/humans/pilots/pilot_light_ged_f.mdl",					    // imc player model
		$"models/humans/pilots/pilot_light_ged_f.mdl",					    // mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"虛空行者",															// title
        "以虛空行者重生：可放置一次傳送門，連接兩處地點"						// respawn notification
	)
	
	player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_SPECIAL, ["grunt_mode", "gm_phasewalker", "wraith_portal", "amped_tacticals"] )
	player.GetMeleeWeapon().AddMod( "fake_human_melee" ) // model doesn't have grunt melee activity

	player.SetSkin( 1 )
	player.SetCamo( 31 ) // white
}

void function BecomeHeavySniper( entity player )
{
	player.SetPlayerSettings( "pilot_grapple_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_sniper",													// primary weapon
		"",																	// secondary weapon
		"mp_weapon_grenade_electric_smoke",									// grenade
		$"models/humans/grunts/imc_grunt_rifle.mdl",						// imc player model
		$"models/humans/grunts/mlt_grunt_rifle.mdl",						// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"重裝狙擊手",															// title
		"以重裝狙擊手重生"												 		// respawn notification
	)

	player.GetMainWeapons()[0].AddMod( "gm_heavysniper" ) // high heavy armor damage, bypass titan armor.
	//player.GetMainWeapons()[0].AddMod( "titandamage_weapon" ) // no need to aim weakpoint to deal damage. the mod has been removed and build into gm_heavysniper now
	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	// mlt specific pov camo
	ApplyMLTGruntCamo( player )
}

void function BecomeRunner( entity player )
{
	player.SetPlayerSettings( "pilot_nomad_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"",												    				// primary weapon
		"",																	// secondary weapon
		"",											                        // grenade
		$"models/humans/pilots/pilot_light_jester_m.mdl",					// imc player model
		$"models/humans/pilots/pilot_light_jester_m.mdl",				    // mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"奔跑者",																// title
		"以奔跑者重生：可無限次使用長時間激素，消耗生命值"						    	// respawn notification
	)

	player.GiveWeapon( "mp_weapon_autopistol", ["gm_runner", "pas_run_and_gun", "extended_ammo"] ) // less falloff and no ads speed penalty re45
    player.GiveWeapon( "mp_weapon_mgl", ["extended_ammo"] ) // extended ammo mgl
	player.GiveOffhandWeapon( "mp_ability_heal", OFFHAND_SPECIAL, ["octane_stim", "gm_runner"] ) // long duration stim, costs health on activation and disables health regen while activating(not compatible with "grunt_mode")
	player.GetMeleeWeapon().AddMod( "fake_human_melee" ) // model doesn't have grunt melee activity
}

void function BecomePathBuilder( entity player )
{
	player.SetPlayerSettings( "pilot_heavy_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_r97",													// primary weapon
		"mp_weapon_mgl",													// secondary weapon
		"",																	// grenade
		$"models/humans/pilots/pilot_heavy_roog_m.mdl",						// imc player model
		$"models/humans/pilots/pilot_heavy_roog_m.mdl",						// mlt player model
		["disable_doublejump", "only_wallclimb", "no_grapple_power_regen"],	// class mods
		"造路人",																// title
		"以造路人重生：可使用一次滑索槍"											// respawn notification
	)

	player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_SPECIAL, ["zipline_gun", "gm_pathbuilder"] ) // normal speed zipline, 
	player.GetMeleeWeapon().AddMod( "fake_human_melee" ) // model doesn't have grunt melee activity

	player.SetSkin( 1 )
	player.SetCamo( 18 ) // ocean

	CreateIMCGruntHelmetForPlayer( player ) // give pilot model a grunt helmet
}

void function BecomeScout( entity player )
{
	player.SetPlayerSettings( "pilot_grapple_male" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_g2",														// primary weapon
		"mp_weapon_rocket_launcher",										// secondary weapon
		"",																	// grenade
		$"models/humans/pilots/pilot_medium_geist_m.mdl",					// imc player model
		$"models/humans/pilots/pilot_medium_geist_m.mdl",					// mlt player model
		["disable_doublejump", "only_wallclimb", "no_grapple_power_regen"],	// class mods
		"偵察兵",																// title
		"以偵察兵重生：可使用兩次鈎爪"												// respawn notification
	)

	player.GetMainWeapons()[0].AddMod( "gm_scout" ) // nerfed g2
	player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_SPECIAL, ["gm_scout"] )
	// use this if you want only 1 grapple usage
	//thread TrackScoutGrappleUsage( player )
	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	player.SetSkin( 1 )
	player.SetCamo( 18 ) // ocean

	CreateIMCGruntHelmetForPlayer( player ) // give pilot model a grunt helmet
}

void function TrackScoutGrappleUsage( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	while ( true )
	{
		if ( player.GetSuitGrapplePower() > 50.0 ) // more than one recharge?
			player.SetSuitGrapplePower( 50.0 ) // set to 50
		WaitFrame()
	}
}

void function BecomeFlyer( entity player )
{
	player.SetPlayerSettings( "pilot_medium_female" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"mp_weapon_shotgun_pistol",											// primary weapon
		"",																	// secondary weapon
		"",																	// grenade
		$"models/humans/pilots/pilot_medium_reaper_f.mdl",					// imc player model
		$"models/humans/pilots/pilot_medium_reaper_f.mdl",					// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"飛鳥",																	// title
		"以飛鳥重生：被動技能噴氣背包"										// respawn notification
	)

	//player.GiveWeapon( "mp_weapon_defender", ["at_low_stockpile"] ) // 15 stockpile charge rifle
	player.GiveWeapon( "mp_weapon_defender", ["quick_charge"] ) // quick-charge charge rifle
	player.GiveOffhandWeapon( "mp_titanability_hover", OFFHAND_SPECIAL, ["jet_pack", "gm_flyer"] )
	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	player.SetSkin( 1 )
	player.SetCamo( 19 ) // shadow

	CreateIMCGruntHelmetForPlayer( player ) // give pilot model a grunt helmet
}

void function BecomeAssassin( entity player )
{
	player.SetPlayerSettings( "pilot_stalker_female" ) // have a better pov model

	SimpleClassLoadout(  
		player,
		"",																	// primary weapon
		"",																	// secondary weapon
		"mp_weapon_grenade_emp",											// grenade
		$"models/humans/pilots/pilot_medium_stalker_f.mdl",					// imc player model
		$"models/humans/pilots/pilot_medium_stalker_f.mdl",					// mlt player model
		["disable_doublejump", "only_wallclimb"],							// class mods
		"刺客",																	// title
		"以刺客重生"															// respawn notification
	)

	// can't use AddMod() or the weapon won't update it's bodygroup
	player.GiveWeapon( "mp_weapon_wingman_n", ["silencer", "ricochet"] ) // silenced wingman elite
	//player.GiveWeapon( "mp_weapon_defender", ["at_low_stockpile"] ) // 15 stockpile charge rifle
	player.GiveWeapon( "mp_weapon_defender", ["quick_charge"] ) // quick-charge charge rifle
	player.GetMeleeWeapon().AddMod( "fake_grunt_melee" ) // model has grunt melee activity, use it

	player.SetSkin( 1 )
	player.SetCamo( 19 ) // shadow

	CreateIMCGruntHelmetForPlayer( player ) // give pilot model a grunt helmet
}

///////////////////////////////////////////////
///// DEFAULT CLASS LOADOUT FUNCTIONS END /////
///////////////////////////////////////////////



///////////////////////////////////
///// CLASS UTILITY FUNCTIONS /////
///////////////////////////////////

// weapon/mods arguments are default by empty
void function SimpleClassLoadout( entity player, string primary = "", string secondary = "", string grenade = "", asset imcPlayerModel = $"", asset mltPlayerModel = $"", array<string> classMods = [], string title = "", string notification = "" )
{
	// take out fast regen before classmods applying
	if ( PlayerHasPassive( player, ePassives.PAS_FAST_HEALTH_REGEN ) )
		TakePassive( player, ePassives.PAS_FAST_HEALTH_REGEN )
	// first do resetting class
	player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), classMods )
	player.SetSuitGrapplePower( 100.0 ) // recharge grapple power

	TakeAllWeapons( player )
	if ( primary != "" )
		player.GiveWeapon( primary )
	if ( secondary != "" )
		player.GiveWeapon( secondary )
	if ( grenade != "" )
		player.GiveOffhandWeapon( grenade, OFFHAND_ORDNANCE, ["grunt_mode"] ) // grenade is limited to one use
	player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE, ["grunt_mode", "fake_ground_execute"] ) // normal melee

	player.Signal( "ForceStopShield" ) // always try to stop last shield captain's shield
	//player.SetTargetInfoIcon( $"ui/targetinfo_soldier_bounty" ) // will appear an error
	if ( title != "" )
		player.SetTitle( title )

	int bodyType = eBodyTypes.NPC_GRUNT
	if ( player.IsMechanical() ) // mechanical from player.SetPlayerSettings()
		bodyType = eBodyTypes.NPC_SPECTRE
	// modified function in _pain_death_sounds.gnut, overwrite death sound!
	PainDeathSounds_SetBodyTypeOverride( player, bodyType )
	if ( !player.IsMechanical() ) // player is not mechanical
		DeathPackage_SetEntityHeadshotFXOverride( player, $"P_headshot_human" ) // override headshot fx with grunt helmet drop effect
	else
		DeathPackage_RemoveEntityHeadshotFXOverride( player ) // mechanic, remove headshot fx override since robotic pilot's fx is default to be the same as spectres
	
	thread HidePlayerNameForEnemy( player ) // sometimes detach a rodeo will show their name again, do a thread
	GivePassive( player, ePassives.PAS_STEALTH_MOVEMENT ) // hide jetpack flame
	Rodeo_SetStealthMovementDisabledForPlayer( player, true ) // disable stealth rodeo, so player will have jetpack modified only
	if( PlayerHasPassive( player, ePassives.PAS_ENEMY_DEATH_ICONS ) ) // valid passives
		TakePassive( player, ePassives.PAS_ENEMY_DEATH_ICONS ) // take it

	// using custom utility!
	//player.SetGroundFrictionScale( 4.0 ) // prevent players getting speed from slide, but this still allow players slidehop
	SetPlayerGroundFrictionPermanent( player, 4.0 ) // permanent ground friction utility

	// default set their skin to 0 for no camo, can be reset after this defination
	player.SetSkin( 0 )
	player.SetCamo( 0 )

	// check model arguments validity
	bool imcModelValid = imcPlayerModel != $""
	bool mltModelValid = mltPlayerModel != $""

	if ( !IsFFAGame() ) // two teams modes
	{
		if ( player.GetTeam() == TEAM_IMC )
		{
			if ( imcModelValid )
				player.SetModel( imcPlayerModel )
		}
		if ( player.GetTeam() == TEAM_MILITIA )
		{
			if ( mltModelValid )
				player.SetModel( mltPlayerModel )
		}
	}
	else // ffa games
	{
		if ( imcModelValid && !mltModelValid ) // only applied imc model
			player.SetModel( imcPlayerModel )
		else if ( mltModelValid && !imcModelValid ) // only applied mlt model
			player.SetModel( mltPlayerModel )
		else // both valid
		{
			// random pick one
			if ( CoinFlip() )
				player.SetModel( imcPlayerModel )
			else
				player.SetModel( mltPlayerModel )
		}
	}

	if ( notification != "" )
		thread WaitForPlayerDropThenNotify( player, notification )
}

void function HidePlayerNameForEnemy( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	while( true )
	{
		player.SetNameVisibleToEnemy( false ) // hide name to enemy, sometimes they're re-enabled such as rodeo over, so keep setting it
		WaitFrame()
	}
}

void function WaitForPlayerDropThenNotify( entity player, string notification )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	WaitFrame() // wait this frame before player actually being set parented
	while( IsValid( player.GetParent() ) ) // spawning from dropship or droppod
		WaitFrame()

	// this can't handle dropships
	//player.WaitSignal( "PlayerDroppodImpact" )
	NSSendInfoMessageToPlayer( player, notification )
}

void function CreateIMCGruntHelmetForPlayer( entity player )
{
	if ( player.LookupAttachment( "HEADSHOT" ) < 0 ) // invalid attachment?
		return
	// if human, remove helmet bodygroup
	if ( !player.IsMechanical() )
		player.SetBodygroup( player.FindBodyGroup( "head" ), 1 )
	entity helmet = CreatePropDynamic( $"models/humans/grunts/imc_grunt_lmg_helmet.mdl" )
	helmet.SetParent( player, "HEADSHOT" )
	helmet.Highlight_SetInheritHighlight( true ) // setup highlight
	DeathPackage_RemoveEntityHeadshotFXOverride( player ) // remove headshotFX override. we always play helmet drop fx on death
	thread TrackHelmetLifeTime( player, helmet )
}

void function TrackHelmetLifeTime( entity player, entity helmet )
{
	helmet.EndSignal( "OnDestroy" )
	table result = WaitSignal( player, "OnDeath", "OnDestroy", "PlayerEmbarkedTitan" )
	if ( result.signal == "OnDeath" )
		PlayHelmetDropFX( player )
	helmet.Destroy()
}

void function PlayHelmetDropFX( entity player )
{
	asset headshotFX = $"P_headshot_human"
	int tagID = player.LookupAttachment( "HEADSHOT" )
	vector fxOrg = player.GetAttachmentOrigin( tagID )
	vector fxAng = player.GetAttachmentAngles( tagID )
	PlayFX( headshotFX, fxOrg, fxAng, null )
}

void function ApplyMLTGruntCamo( entity player )
{
	// mlt specific pov camo
	if ( player.GetTeam() == TEAM_MILITIA )
	{
		player.SetSkin( 1 )
		player.SetCamo( 1 ) // maybe more like mlt grunts
	}
}

///////////////////////////////////////
///// CLASS UTILITY FUNCTIONS END /////
///////////////////////////////////////