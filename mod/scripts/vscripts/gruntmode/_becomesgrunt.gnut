untyped

global function BecomesGruntMode_Init

global function GruntMode_RegisterPlayerClass
global function GruntMode_IsSpecialistClass // for score events in gruntmode.gnut

// player damage protection system. toggle through playlistvar "grunt_player_protection"
const float PLAYER_DAMAGE_PROTECTION_MIN_HEALTH_FRAC = 0.0 // currently no need to add min frac
const float PLAYER_DAMAGE_PROTECTION_COOLDOWN = 25.0
const float PLAYER_DAMAGE_PROTECTION_DURATION = 1.0
// protect player from getting instant killed by these classes
const array<string> PLAYER_DAMAGE_PROTECTION_TRIGGERING_CLASS =
[
	"npc_titan",
	"npc_pilot_elite"
]
// triggering protection without have to being attacked by specified classes
const array<int> PLAYER_DAMAGE_PROTECTION_SPECIFICS =
[
	damagedef_reaper_nuke,
	damagedef_frag_drone_throwable_NPC,
	damagedef_frag_drone_explode_FD
]
// no protection against crash damages ( adding back stepping on and melee damage protection )
const array<int> PLAYER_DAMAGE_PROTECTION_BLACKLISTS =
[
	damagedef_reaper_fall,
	//damagedef_titan_step,
	damagedef_titan_fall,
	//eDamageSourceId.auto_titan_melee
]
const array<int> PLAYER_DAMAGE_PROTECTION_BLACKLIST_DAMAGEFLAGS =
[
	//DF_MELEE
]

// npc damage settings!!!
const float NPC_PILOT_DAMAGE_MULTIPLIER = 2.0
const float NPC_PROWLER_DAMAGE_MULTIPLIER = 0.3
const float NPC_SUPER_SPECTRE_ROCKET_DAMAGE_MULTIPLIER = 0.5

struct PlayerClassStruct
{
	string className
	void functionref( entity player ) classLoadoutFunction
	bool isSpecialist // killing a specialist class will give more scores
}

struct
{
	table<entity, float> playerNextChatterAllowedTime // this is for making cooldowns between chatters, checking uids
	table<entity, float> playerNextDamageChatterAllowedTime // specified for damaging targets
	table<entity, string> playerLastChatterName // we stop the chatter sound on death
	table<entity, string> playerClassTable // this is for saving player's class
	table<string, PlayerClassStruct> gruntModeClasses // this is for saving all valid classes
	table<entity, float> playerDamageProtectionEndTime // want to make player feel better encountering titans
	table<entity, float> playerNextDamageProtectionAllowedTime
} file

void function BecomesGruntMode_Init()
{
	SetLoadoutGracePeriodEnabled( false ) // no loadout switch allowed!
	PlayerEarnMeter_SetEnabled( false ) // disable earnmeter

	// hacked death
	// may mess up highlights( client won't clean up npc's DeathRecapHighlight )
	//HackedDeath_SetEnabled( true )
	//HackedDeath_SetFakeBodySilence( false ) // so grunts will have death sounds
	//HackedDeath_SetDeathEffectEnable( false ) // disable death effect

	// specifics!!!!
	// night combat simulation
	if ( GetCurrentPlaylistVarFloat( "gruntmode_night_chance", 0.33 ) > 0 )
	{
		if ( RandomInt( 1 / GetCurrentPlaylistVarFloat( "gruntmode_night_chance", 0.33 ) ) == 0 )
			Night_Combat_Settings_Init()
	}

	// score
	ScoreEvent_DisableCallSignEvent( true ) // since players are grunts, never show callsign things
	// health regen
	HealthRegen_SetCustomRegenDelay( 6.0, 6.0, 6.0 ) // grunt's health regen delay is forced to be 6.0(no matter pas_fast_health_regen is equiped)
	HealthRegen_SetCustomRegenRate( 4.0, 4.0 ) // grunt's health regen rate is forced to be 4.0
	// highlight
	//Highlight_HideDefaultEnemyHighlight( true ) // this will hide enemy's highlights
	Highlight_SetCustomHighlightFunction( GruntModeHighlight )
	// death effects
	SetDeathHintsEnabled( false ) // no need to do death hints since player changes loadout every respawn
	SetDeathCamLengthForced( 0.5 ) // don't want to display a long death cam
	SetReplayStartDelayOverride( 1.5 ) // total of 2.0s death cam( 0.5s to enable respawn + 1.5s before replay )
	//CustomDamageEffect_SetPlayerDeathFadeFromBlack( true ) // actually not hidden, just fade from black, might looks better
	//SetKillcamsEnabled( false ) // disable replay, no need since we've made a delayed replay system
	RemoveReplayDisabledDamageSourceId( eDamageSourceId.human_execution ) // modified function in _utility_shared.nut, we have shorten executions so don't disable killcam
	// npc executions
	//MeleeSyncedNPC_EnableAll_Init() // npc executions for fun
	MeleeSyncedNPC_AllowNPCTitanExecutions( true )
	MeleeSyncedNPC_AllowNPCPilotExecutions( true )
	MeleeSyncedNPC_AllowNPCGruntExecutions( true ) // spectres don't have neck snap attacker sequence, they'll try pilot executions, which is bad
	Melee_SetPlayerClassicExecutionsEnabled( true ) // best execution for grunt players
	MeleeSyncedNPC_AllowNPCPilotExecuteOtherNPCs( true ) // pilot models don't have syncedMeleeData initialized, so let them use mp pilot executions
	// rodeo
	Rodeo_BatteryThiefHighlightEnabled( false ) // you don't have to worry about the highlight
	//Rodeo_SetBatteryRemovalDamageFlags( damageTypes.rodeoBatteryRemoval | DF_BYPASS_SHIELD ) // rodeo will deal bvpass_shield damage to titans
	
	// classic rodeo modifier settings!
    //ClassicRodeo_SetEnabled( true ) // handled by playlistvar!
	ClassicRodeo_SetRodeoAttackDamageScale( 1.0 ) // damage taken from classic rodeo
	ClassicRodeo_BatteryContainerOnlyProtectsOnce( true ) // battery container can only protect once

	// tempfix specifics!
	SetShouldPlayFactionDialogue( false ) // don't announce player!
	SetBattleChatterEnabled_Northstar( false ) // grunt mode are having some special chatters, disable default one
	SetWeaponDropsEnabled( false ) // another fixed thing only with tempfix

	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
	AddCallback_OnPlayerKilled( OnPlayerKilled )
	AddCallback_OnNPCKilled( OnNPCKilled )
	AddCallback_GameStateEnter( eGameState.Prematch, OnGamePrematch )
	AddCallback_GameStateEnter( eGameState.Playing, OnGamePlaying )

	// player damage chatter
	AddDamageByCallback( "player", OnPlayerDealDamage )
	// player damage protection
	AddPostDamageCallback( "player", OnPlayerPostDamage )

	// ai configs
	RegisterSignal( "StopTryHideName" )
	AddSpawnCallback( "npc_soldier", GruntConfig )
	AddSpawnCallback( "npc_pilot_elite", PilotConfig )
	AddSpawnCallback( "npc_marvin", MarvinConfig )
	AddSpawnCallback( "npc_prowler", ProwlerConfig )
	AddSpawnCallback( "npc_spectre", SpectreConfig )
	AddSpawnCallback( "npc_stalker", StalkerConfig )
	AddSpawnCallback( "npc_super_spectre", ReaperConfig )
	AddSpawnCallback( "npc_titan", TitanConfig )
	AddSpawnCallback( "npc_drone", DroneConfig )
	AddSpawnCallback( "npc_gunship", GunshipConfig )
	AddSpawnCallback( "npc_dropship", DropshipConfig )
	AddSpawnCallback( "npc_frag_drone", TickConfig )
	AddSpawnCallback( "npc_turret_sentry", TurretConfig )

	// ai damages
	AddDamageByCallback( "npc_pilot_elite", BuffPilotDamage )
	//MeleeSyncedNPC_AllowExecutingNPCPilot( true ) // hard to perform, but you can oneshot pilots with this
	AddDamageCallbackSourceID( eDamageSourceId.prowler_melee, NerfProwlerMelee )
	AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_super_spectre, NerfReaperRocket )
	//DamageUtility_EnableNPCLocationBasedDamage( true ) // modified function in sh_damage_utility.gnut. allow npcs to deal headshot damages
}


///////////////////////////////////
///// PLAYER DAMAGE FUNCTIONS /////
///////////////////////////////////

void function OnPlayerDealDamage( entity victim, var damageInfo )
{
	entity attacker = DamageInfo_GetAttacker( damageInfo )

	// specified for player. instant killing a player will play killed chatter but not damaged chatter
	if ( IsValid( victim ) )
	{
		if ( victim.IsPlayer() )
		{
			bool isKillshot = DamageInfo_GetDamage( damageInfo ) >= ( victim.GetHealth() + victim.GetShieldHealth() )
			if ( isKillshot )
				return
		}
	}

	if ( IsValid( attacker ) )
		TryGruntBattleChatterOnEnt( attacker, victim, true ) // damage chatter style
}

// want to give player some protection against titan damages, so they won't feel very bad upon encountering titans
void function OnPlayerPostDamage( entity player, var damageInfo )
{
	// playlistvar check
	if ( GetCurrentPlaylistVarInt( "grunt_player_protection", 1 ) == 0 )
		return

	// general check
	if ( IsInstantDeath( damageInfo ) || DamageInfo_GetForceKill( damageInfo ) || player.IsTitan() )	
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( !IsValid( attacker ) )
		return

	if ( attacker.IsPlayer() )
		return

	int methodOfDamage = DamageInfo_GetDamageSourceIdentifier( damageInfo )
	int damageType = DamageInfo_GetCustomDamageType( damageInfo )
	if ( PLAYER_DAMAGE_PROTECTION_BLACKLISTS.contains( methodOfDamage ) )
		return
	foreach ( int damageFlag in PLAYER_DAMAGE_PROTECTION_BLACKLIST_DAMAGEFLAGS )
	{
		if ( damageType & damageFlag )
			return
	}

	if ( !PLAYER_DAMAGE_PROTECTION_SPECIFICS.contains( methodOfDamage ) && !PLAYER_DAMAGE_PROTECTION_TRIGGERING_CLASS.contains( attacker.GetClassName() ) )
		return

	TryGivePlayerDamageProtection( player, damageInfo )
}

bool function TryGivePlayerDamageProtection( entity player, var damageInfo )
{
	if ( player.GetHealth() > DamageInfo_GetDamage( damageInfo ) ) // player have enough health to take the damage
		return false

	if ( file.playerDamageProtectionEndTime[ player ] < Time() ) // not in protection
	{
		if ( GetHealthFrac( player ) < PLAYER_DAMAGE_PROTECTION_MIN_HEALTH_FRAC ) // no enough health to trigger protection
			return false
		if ( Time() < file.playerNextDamageProtectionAllowedTime[ player ] ) // still in cooldown
			return false // just return
		
		// set player in protection
		file.playerDamageProtectionEndTime[ player ] = Time() + PLAYER_DAMAGE_PROTECTION_DURATION
		file.playerNextDamageProtectionAllowedTime[ player ] = Time() + PLAYER_DAMAGE_PROTECTION_COOLDOWN
	}

	// player in protection, never kill them
	//print( "player protected!" )
	DamageInfo_SetDamage( damageInfo, player.GetHealth() - 1 )
	return true
}

///////////////////////////////////////
///// PLAYER DAMAGE FUNCTIONS END /////
///////////////////////////////////////



////////////////////////////////
///// NPC CONFIG FUNCTIONS /////
////////////////////////////////

void function GruntModeHighlight( entity ent )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( ent, "sp_enemy_pilot" )
	ent.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// for npc pilots and titans, we save their enemy highlights
	string className = ent.GetClassName()
	switch ( className )
	{
		case "npc_pilot_elite":
			ent.e.hasDefaultEnemyHighlight = true // mark them as hasDefaultHighlight, so they'll save highlights after phase shift
			Highlight_SetEnemyHighlight( ent, "enemy_player" )
			break
		case "npc_titan":
		case "npc_super_spectre":
		case "npc_gunship":
			ent.e.hasDefaultEnemyHighlight = true // mark them as hasDefaultHighlight, so they'll save highlights after phase shift
			Highlight_SetEnemyHighlight( ent, "enemy_titan" )
			break
	}
}

// hardcoded here
const array<string> GRUNTMODE_SPECIALIST_GRUNTS =
[
	"npc_soldier_shield_captain",
	"npc_soldier_pve_specialist",
	"npc_soldier_sidearm",
	"npc_soldier_pve_eliteguard",
]

void function GruntConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// hardcoded here
	string aiSetName = soldier.GetAISettingsName()
	bool isSpecialistGrunt = GRUNTMODE_SPECIALIST_GRUNTS.contains( aiSetName )
	if ( !isSpecialistGrunt ) // normal grunts
	{
		soldier.SetMaxHealth( 80 )
		soldier.SetHealth( 80 )
		// hide name if they're not specialist
		thread TryHideName( soldier ) // grunts may spawn from dropship, they'll still show name, so do a loop
	}
	
	thread GruntTitleThink( soldier ) // specialist grunts may spawn from dropship, do a think here

	Melee_SetHumanSizedDoClassicExecution( soldier, true ) // grunts uses classic neck snap
}

void function TryHideName( entity soldier )
{
	soldier.EndSignal( "OnDestroy" )
	soldier.EndSignal( "OnDeath" )
	soldier.EndSignal( "StopTryHideName" ) // may signaled by GruntTitleThink()

	float endTime = Time() + 10
	while ( Time() <= endTime )
	{
		soldier.SetNameVisibleToEnemy( false )
		WaitFrame()
	}
}

void function GruntTitleThink( entity soldier )
{
	soldier.EndSignal( "OnDestroy" )
	soldier.EndSignal( "OnDeath" )

	float endTime = Time() + 5
	while ( Time() <= endTime )
	{
		WaitFrame()
		string aiSetName = soldier.GetAISettingsName()
		bool isSpecialistGrunt = GRUNTMODE_SPECIALIST_GRUNTS.contains( aiSetName )
		if ( !isSpecialistGrunt )
			continue
		WaitFrame() // they may get a title from spawn function, we wait a frame before changing again
		soldier.SetTitle( GetMilitiaTitle() ) // funny in _ai_soldiers.gnut
		// try to show name and end TryHideName() thread
		soldier.Signal( "StopTryHideName" )
		soldier.SetNameVisibleToEnemy( true )
		return
	}
}

void function PilotConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )
}

void function MarvinConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	soldier.SetMaxHealth( 300 )
	soldier.SetHealth( 300 )

	soldier.SetNameVisibleToEnemy( false )

	soldier.SetNoTarget( true ) // don't want other npcs targeting them
}

void function ProwlerConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// so they won't block teammates( won't work )
	soldier.kv.CollisionGroup = TRACE_COLLISION_GROUP_PLAYER

	//soldier.SetNameVisibleToEnemy( false )
	// hardcoded here: if it's a small prowler we won't show name
	if ( float( soldier.kv.modelscale ) < 1.0 )
		soldier.SetNameVisibleToEnemy( false )
}

void function SpectreConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	soldier.SetMaxHealth( 190 )
	soldier.SetHealth( 190 )

	thread TryHideName( soldier ) // spectres may spawn from dropship

	DisableLeeching( soldier ) // grunts can't leech
}

void function StalkerConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	soldier.SetMaxHealth( 280 )
	soldier.SetHealth( 280 )

	thread TryHideName( soldier ) // stalkers may spawn from dropship
}

void function ReaperConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// even stronger
	soldier.SetMaxHealth( 5000 ) // was 5500, we have 2 reapers now...
	soldier.SetHealth( 5000 )
}

void function TitanConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )
}

void function DroneConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	soldier.SetNameVisibleToEnemy( false )
}

void function GunshipConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )
	// lower health since they'll become noTarget
	soldier.SetMaxHealth( 5500 )
	soldier.SetHealth( 5500 )

	//soldier.SetNoTarget( true ) // don't want other npcs targeting them
}

void function DropshipConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	soldier.SetNoTarget( true ) // don't want other npcs targeting them
}

void function TickConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// enemy highlight
	Highlight_SetEnemyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 2, 0, < 2,0,0 > )

	soldier.SetNameVisibleToEnemy( false )
}

void function TurretConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )
	
	soldier.SetNameVisibleToEnemy( false )
}

////////////////////////////////////
///// NPC CONFIG FUNCTIONS END /////
////////////////////////////////////



////////////////////////////////
///// NPC DAMAGE FUNCTIONS /////
////////////////////////////////

void function BuffPilotDamage( entity victim, var damageInfo )
{
	// not a heavy armor target, hit by bullet
	if ( victim.GetArmorType() != ARMOR_TYPE_HEAVY && DamageInfo_GetCustomDamageType( damageInfo ) & DF_BULLET )
	{
		// make npc pilots powerful?
		DamageInfo_SetDamage( damageInfo, DamageInfo_GetDamage( damageInfo ) * NPC_PILOT_DAMAGE_MULTIPLIER )
	}
}

void function NerfProwlerMelee( entity victim, var damageInfo )
{
	bool nerfDamage = false
	// prowler's craw damage is 80, pounce damage is 100
	if ( victim.IsPlayer() ) // nerf it's damage agains players
		nerfDamage = true

	if ( victim.IsNPC() )
	{
		// a npc owned by player, do reduce damage
		if ( IsValid( victim.GetBossPlayer() ) )
			nerfDamage = true
		if ( IsValid( victim.GetOwner() ) )
			nerfDamage = true
	}

	if ( nerfDamage )
		DamageInfo_SetDamage( damageInfo, DamageInfo_GetDamage( damageInfo ) * NPC_PROWLER_DAMAGE_MULTIPLIER )
}

void function NerfReaperRocket( entity victim, var damageInfo )
{
	if ( !victim.IsPlayer() || victim.IsTitan() ) // nerf the damage they dealt to humansized players
		return

	DamageInfo_SetDamage( damageInfo, DamageInfo_GetDamage( damageInfo ) * NPC_SUPER_SPECTRE_ROCKET_DAMAGE_MULTIPLIER )
}

void function StartKillerOutline( entity victim, entity attacker )
{
	// may mess up highlights( client won't clean up npc's DeathRecapHighlight if player didn't entered killcam )
	//if( attacker.IsNPC() || attacker.IsPlayer() )
	//	Highlight_SetDeathRecapHighlight( attacker, "killer_outline" )
}

////////////////////////////////////
///// NPC DAMAGE FUNCTIONS END /////
////////////////////////////////////



//////////////////////////////
///// CALLBACK FUNCTIONS /////
//////////////////////////////

void function OnClientConnected( entity player )
{
	// init
	// grunt chatter
	file.playerNextChatterAllowedTime[ player ] <- 0.0
	file.playerNextDamageChatterAllowedTime[ player ] <- 0.0
	file.playerLastChatterName[ player ] <- ""
	// grunt classes
	file.playerClassTable[ player ] <- "" // empty class
	// damage protection
	file.playerDamageProtectionEndTime[ player ] <- 0.0
	file.playerNextDamageProtectionAllowedTime[ player ] <- 0.0

	AddPlayerHeldButtonEventCallback( player, IN_USE, CallbackFuncCornerUs, 0.5 ) // was 0.3
	AddPlayerHeldButtonEventCallback( player, IN_USE_AND_RELOAD, CallbackFuncCornerUs, 0.5 ) // controller support
	// these now handled by damage chatters
	//AddButtonPressedPlayerInputCallback( player, IN_USE, CallbackFuncSpotEnemy )
	//AddButtonPressedPlayerInputCallback( player, IN_USE_AND_RELOAD, CallbackFuncSpotEnemy ) // controller support
}

void function OnPlayerChangeLoadout( entity player , PilotLoadoutDef p )
{	
	BecomeGruntModePlayer( player )
	// older version of the function, pretty hard to modify
	//BecomesGrunt_Loadout( player )
}

void function OnPlayerRespawned( entity player )
{	
	if ( GetGameState() > eGameState.Prematch )
		SpawnFromDroppod( player, 6 ) // less droppod lifetime, hopefully reduce entity count
	//if( GetZiplineDropshipSpawns().len() != 0 )
	//	RespawnInDropShip( player ) // bugged
	//else
	//	SpawnFromDroppod( player, 5 )
	thread DisableBoostBar( player ) // don't know why this causes problem
}

void function DisableBoostBar( entity player )
{
	WaitFrame()
	if ( IsAlive( player ) )
		PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )	// completely disable titan meter
}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{
	StartKillerOutline( victim, attacker )
	PlayEnemyPlayerKilledChatter( victim, attacker )
	PlayFriendlyPlayerKilledChatter( victim, attacker )
	PlayTitanKilledChatter( victim, attacker )
}

void function OnNPCKilled( entity victim, entity attacker, var damageInfo )
{
	PlayTitanKilledChatter( victim, attacker )
}

void function OnGamePrematch()
{
	InitGruntModeSpawnerSettings() // care package settings or something...

	foreach ( entity player in GetPlayerArray() )
		file.playerNextChatterAllowedTime[ player ] = Time() + 15.0 // try to avoid call out deaths caused by teamshuffle

	// only tempfix has checked their validity before clean up
	/* // no need to clean up since spawnpoint has been fixed, or player will be able to shoot outside map
	foreach( entity trigger in GetEntArrayByClass_Expensive( "trigger_out_of_bounds" ) )
    {
		#if MP
			trigger.DisconnectOutput( "OnStartTouch", EntityEnterOutOfBoundsTrig )
			trigger.DisconnectOutput( "OnEndTouch", EntityLeaveOutOfBoundsTrig )
		#else
			trigger.DisconnectOutput( "OnStartTouch", EntityOutOfBounds )
			trigger.DisconnectOutput( "OnEndTouch", EntityBackInBounds )
		#endif
    }
	*/
}

void function OnGamePlaying()
{
	foreach ( entity player in GetPlayerArray() )
		file.playerNextChatterAllowedTime[ player ] = Time() + 8.0 // little delay before we can play first chatter
}

//////////////////////////////////
///// CALLBACK FUNCTIONS END /////
//////////////////////////////////



///////////////////////////////////
///// GRUNT CHATTER FUNCTIONS /////
///////////////////////////////////

void function CallbackFuncCornerUs( entity player )
{
	GenericGruntChatter( player )
}

const array<string> GENERIC_GRUNT_CHATTERS = 
[ 
	"diag_sp_intro_WD104_24_01_mcor_grunt1",
	"diag_sp_intro_WD103_02_01_mcor_grunt2",
	"diag_sp_intro_WD104_26_01_mcor_grunt3",
	"diag_sp_intro_WD104_25_01_mcor_grunt2",
	"diag_sp_intro_WD104_29_01_mcor_grunt6"
]
//"diag_sp_intro_WD103_02_01_mcor_grunt2" Backup! Backup!
//"diag_sp_intro_WD104_26_01_mcor_grunt3" We can't stay here, move, move!
//"diag_sp_ReaperTown_BM103_01a_01_mcor_grunt2" Look, a pilot! now they're doing our favor
//"diag_sp_intro_WD104_24_01_mcor_grunt1" They're trying to corner us!
//"diag_sp_intro_WD104_25_01_mcor_grunt2" We can't let them turn us down, we need to move!
//"diag_sp_intro_WD104_29_01_mcor_grunt6" Do we have any pilots in the area?

void function GenericGruntChatter( entity player )
{
	if ( player.IsMechanical() ) // spectre don't have generic chatters
		return
	string curChatter = GENERIC_GRUNT_CHATTERS[ RandomInt( GENERIC_GRUNT_CHATTERS.len() ) ]
	TryPlayerGruntChatter( player, curChatter, 5 )
}

void function CallbackFuncSpotEnemy( entity player )
{
	thread SpotEnemyChatterThink( player )
}

void function SpotEnemyChatterThink( entity player )
{
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * 65535, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
	{
		//print( "Didn't trace anything" )
		return
	}
	if( !traceResult.hitEnt.IsNPC() )
	{
		//print( "hitEnt wasn't npc" )
		return
	}
	if( traceResult.hitEnt.GetTeam() == player.GetTeam() )
		return
	
	//print( "hitEnt's classname: " + className )
	TryGruntBattleChatterOnEnt( player, traceResult.hitEnt )
}

// hardcoded enemy chatter
const array<string> GRUNT_ENEMY_CHATTER_CLASSES =
[
	// no grunt chatters for now
	"player",
	"npc_soldier",
	"npc_spectre", 
	"npc_stalker", 
	"npc_prowler", 
	"npc_pilot_elite", 
	"npc_super_spectre",
	"npc_titan"
]

// have to hardcode dialogues from "bc_generalCombat"
const array<string> ENEMY_GENERIC_CHATTERS =
[
	"diag_sp_corkscrew_SE131_21_01_mcor_grunt1",
	"diag_sp_corkscrew_SE131_12_01_mcor_grunt1",
]

// have to hardcode dialogues from "bc_reactEnemyReaper"
const array<string> ENEMY_REAPER_CHATTERS =
[
	"diag_sp_ReaperTown_BM102_16_01_mcor_grunt2",
	"diag_sp_ReaperTown_BM102_16_01_mcor_grunt2"
]


bool function TryGruntBattleChatterOnEnt( entity player, entity ent, bool damageChatter = false )
{
	string className = ent.GetClassName()
	//print( "chatter target's classname: " + className )

	if ( !GRUNT_ENEMY_CHATTER_CLASSES.contains( className ) )
		return false
	
	// player specifics
	if ( ent.IsPlayer() ) // victim is player
	{
		// mechanical check removed for now
		//if ( ent.IsMechanical() )
		//	className = "npc_spectre"
		if ( ent.IsTitan() ) // victim is a player titan. no feature now, just adding it
			className = "npc_titan"
	}

	bool targetingGrunt = false
	string gruntChatter = ""
	string spectreChatter = "diag_imc_spectre_gs_engagepilotenemy_01_1" // spectre only has a few chatters
	float chatterCooldown = 0.0
	float damageChatterCooldown = 0.0

	switch ( className )
	{
		// no grunt chatters for now, engaging grunts will have 33% chance of playing a generic chatter, otherwise they'll have 20s chatter cooldown
		case "player":
		case "npc_soldier":
			if ( damageChatter )
			{
				if ( !player.IsMechanical() && RandomInt( 3 ) == 0 )
					gruntChatter = ENEMY_GENERIC_CHATTERS[ RandomInt( ENEMY_GENERIC_CHATTERS.len() ) ]
				else
					SetPlayerChatterCooldown( player, 0, true, 20 )
			}
			targetingGrunt = true
			break
		case "npc_spectre":
			//gruntChatter = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_reactSpectreEnemyMid_0" + string( RandomIntRange( 1, 3 ) )
			gruntChatter = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagingSpectre_0" + string( RandomIntRange( 1, 4 ) )
			chatterCooldown = 5
			break
		case "npc_stalker":
			gruntChatter = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagingStalker_0" + string( RandomIntRange( 1, 2 ) )
			chatterCooldown = 5
			break
		case "npc_prowler":
			gruntChatter = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagingProwler_0" + string( RandomIntRange( 1, 2 ) )
			chatterCooldown = 5
			break
		case "npc_pilot_elite":
			gruntChatter = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_engagepilotenemy_0" + string( RandomIntRange( 1, 7 ) )
			chatterCooldown = 5
			break
		case "npc_super_spectre":
			gruntChatter = ENEMY_REAPER_CHATTERS[ RandomInt( ENEMY_REAPER_CHATTERS.len() ) ]
			spectreChatter = "diag_imc_spectre_gs_spotclosetitancall_01"
			chatterCooldown = 5
			break
		case "npc_titan":
			gruntChatter = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_enemytitanspotcall_0" + string( RandomIntRange( 1, 2 ) )
			spectreChatter = "diag_imc_spectre_gs_spotclosetitancall_01"
			chatterCooldown = 5
			break
	}

	if ( gruntChatter == "" ) // cannot find any chatter
		return false
	
	if ( player.IsMechanical() && spectreChatter == "" ) // mechanical player should use spectre call
		return false

	// grunt players: 33% chance of using a generic chatter
	if ( !targetingGrunt )
	{
		if ( !player.IsMechanical() && RandomInt( 3 ) == 0 )
		{
			gruntChatter = ENEMY_GENERIC_CHATTERS[ RandomInt( ENEMY_GENERIC_CHATTERS.len() ) ]
			chatterCooldown = 5
		}
	}

	if ( damageChatter )
		damageChatterCooldown = 30 // don't want to make damage chatter annoying

	string chatterSound = player.IsMechanical() ? spectreChatter : gruntChatter
	return TryPlayerGruntChatter( player, chatterSound, chatterCooldown, damageChatter, damageChatterCooldown )
}

bool function TryPlayerGruntChatter( entity player, string soundName, float cooldown, bool damageChatter = false, float damageChatterCooldown = 30 )
{
	if ( !CanPlayerUseGruntChatter( player, damageChatter ) )
		return false

	// stop existing chatter to make things feel better
	StopPlayerCurrentChatter( player )
	EmitSoundOnEntity( player, soundName )

	// store last chatter
	file.playerLastChatterName[ player ] = soundName
	SetPlayerChatterCooldown( player, cooldown, damageChatter, damageChatterCooldown )
	return true
}

void function StopPlayerCurrentChatter( entity player )
{
	if ( file.playerLastChatterName[ player ] != "" )
		StopSoundOnEntity( player, file.playerLastChatterName[ player ] )
}

void function SetPlayerChatterCooldown( entity player, float cooldown, bool damageChatter = false, float damageChatterCooldown = 20 )
{
	// chatter cooldown
	if ( damageChatter )
		file.playerNextDamageChatterAllowedTime[ player ] = Time() + damageChatterCooldown

	file.playerNextChatterAllowedTime[ player ] = Time() + cooldown
}

bool function CanPlayerUseGruntChatter( entity player, bool damageChatter = false )
{
	if ( !IsAlive( player ) )
		return false

	if ( IsValid( player.GetTitanSoulBeingRodeoed() ) ) // player rodeoing a titan! shouldn't do chatter
		return false

	bool nextChatterAllow = Time() >= file.playerNextChatterAllowedTime[ player ]
	bool nextDamageChatterAllow = Time() >= file.playerNextDamageChatterAllowedTime[ player ]
	if ( damageChatter )
		return nextChatterAllow && nextDamageChatterAllow
	return nextChatterAllow
}

void function PlayEnemyPlayerKilledChatter( entity victim, entity attacker )
{
	if ( victim.IsPlayer() )
	{
		// stop victim's existing chatter
		StopPlayerCurrentChatter( victim )
		// restore next protection
		file.playerNextDamageProtectionAllowedTime[ victim ] = Time()

		if ( attacker.IsPlayer() )
			thread DelayedEnemyKilledChatter( attacker )
	}
}

void function DelayedEnemyKilledChatter( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	wait RandomFloatRange( 0.5, 0.8 )

	string chatterSound = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_killenemygrunt_0" + string( RandomIntRange( 1, 2 ) )
	if ( player.IsMechanical() ) // spectre chatter
		chatterSound = "diag_imc_spectre_gs_killenemypilot_01_1"
	TryPlayerGruntChatter( player, chatterSound, 5 )
}

const float GRUNT_NEARBY_ALLY_SEARCH_RADIUS = 350

void function PlayFriendlyPlayerKilledChatter( entity victim, entity attacker )
{
	array<entity> nearbyAllies = GetPlayerArrayEx( "any", victim.GetTeam(), TEAM_ANY, victim.GetOrigin(), GRUNT_NEARBY_ALLY_SEARCH_RADIUS )

	foreach( entity player in nearbyAllies )
	{
		if( IsAlive( player ) )
		{
			thread DelayedFriendlyKilledChatter( player )
			return // only one player will call out!
		}
	}
}

void function DelayedFriendlyKilledChatter( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	wait RandomFloatRange( 0.5, 0.8 )

	array<entity> nearbyAllies = GetPlayerArrayEx( "any", player.GetTeam(), TEAM_ANY, player.GetOrigin(), GRUNT_NEARBY_ALLY_SEARCH_RADIUS )
	if( nearbyAllies.len() == 0 ) // no other allys around
	{
		string chatterSound = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_squaddeplete"
		if ( player.IsMechanical() ) // spectre chatter
			chatterSound = "diag_imc_spectre_gs_squaddeplete_01_1"
		TryPlayerGruntChatter( player, chatterSound, 5 )
	}
	else
	{
		string chatterSound = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_allygruntdown"
		if ( player.IsMechanical() ) // spectre chatter
			chatterSound = "diag_imc_spectre_gs_allygrundown_05_1"
		TryPlayerGruntChatter( player, chatterSound, 5 )
	}
}

void function PlayTitanKilledChatter( entity victim, entity attacker )
{
	if ( !attacker.IsPlayer() )
		return

	if ( !victim.IsTitan() )
		return
	
	thread DelayedTitanKilledChatter( attacker )
}

void function DelayedTitanKilledChatter( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	wait RandomFloatRange( 0.5, 0.8 )

	string chatterSound = "diag_imc_grunt" + string( RandomIntRange( 1, 6 ) ) + "_bc_gruntkillstitan"
	if ( CoinFlip() ) // this dialogue has a "_01" suffix
		chatterSound += "_01"
	if ( player.IsMechanical() ) // spectre chatter
		chatterSound = "diag_imc_spectre_gs_gruntkillstitan_02_1"
	TryPlayerGruntChatter( player, chatterSound, 5 )
}

///////////////////////////////////////
///// GRUNT CHATTER FUNCTIONS END /////
///////////////////////////////////////



///////////////////////////////////
///// GRUNT RESPAWN FUNCTIONS /////
///////////////////////////////////

void function BecomeGruntModePlayer( entity player )
{
	// pick a random class
	array<string> validClasses = GetGruntModeValidClasses()
	string selectedClassName = validClasses[ RandomInt( validClasses.len() ) ]
	PlayerClassStruct selectedClassStruct = file.gruntModeClasses[ selectedClassName ]

	// debugging stuff
	//array<string> testClasses = [ "Ravenant", "Spectre" ]
	//string randomTest = testClasses[ RandomInt( testClasses.len() ) ]
	//PlayerClassStruct selectedClassStruct = file.gruntModeClasses[ randomTest ]

	//PlayerClassStruct selectedClassStruct = file.gruntModeClasses[ "Ravenant" ]

	file.playerClassTable[ player ] = selectedClassStruct.className
	selectedClassStruct.classLoadoutFunction( player ) // run loadout function
}

///////////////////////////////////////
///// GRUNT RESPAWN FUNCTIONS END /////
///////////////////////////////////////



//////////////////////////////////////////
///// EXTRASPAWNER SETTINGS FUNCTION /////
//////////////////////////////////////////

void function InitGruntModeSpawnerSettings()
{
	ExtraSpawner_SetNPCWeapons( "npc_soldier", ["mp_weapon_rspn101", "mp_weapon_lmg", "mp_weapon_shotgun", "mp_weapon_r97", "mp_weapon_dmr"] )
	ExtraSpawner_SetNPCAntiTitanWeapons( "npc_soldier", ["mp_weapon_rocket_launcher", "mp_weapon_mgl"] )
	ExtraSpawner_SetNPCGrenadeWeapons( "npc_soldier", ["mp_weapon_frag_grenade", "mp_weapon_thermite_grenade", "mp_weapon_grenade_electric_smoke"] )
	ExtraSpawner_SetNPCExtraWeaponMods( "npc_soldier", ["npc_disable_fire_at_pilot"] ) // disable archers fire at human players
	
	ExtraSpawner_SetNPCWeapons( "npc_spectre", ["mp_weapon_mastiff", "mp_weapon_doubletake", "mp_weapon_hemlok_smg", "mp_weapon_hemlok"] )
	ExtraSpawner_SetNPCAntiTitanWeapons( "npc_spectre", ["mp_weapon_arc_launcher", "mp_weapon_defender"] )

	ExtraSpawner_SetNPCWeapons( "npc_pilot_elite", ["mp_weapon_rspn101_og", "mp_weapon_r97", "mp_weapon_car", "mp_weapon_hemlok_smg", "mp_weapon_hemlok", "mp_weapon_g2", "mp_weapon_vinson"] )
	ExtraSpawner_SetNPCGrenadeWeapons( "npc_pilot_elite", ["mp_weapon_thermite_grenade", "mp_weapon_grenade_emp"] )	

	ExtraSpawner_SetNPCWeapons( "npc_stalker", ["mp_weapon_softball", "mp_weapon_smr", "mp_weapon_epg"] ) // npcs can't shoot "mp_weapon_pulse_lmg"
	ExtraSpawner_SetNPCExtraWeaponMods( "npc_stalker", ["multiplayer_npc_grenadier", "gruntmode_stalker_weapon"] ) // lower damage explosives

	ExtraSpawner_SetCarePackageWeapons( ["mp_weapon_epg", "mp_weapon_smr", "mp_weapon_softball"] ) // removed "mp_weapon_pulse_lmg"

	ExtraSpawner_SetCarePackageWeaponMods( "mp_weapon_epg", [] ) // was ["pas_run_and_gun"]
	ExtraSpawner_SetCarePackageWeaponMods( "mp_weapon_smr", [] ) // was ["extended_ammo"]
	ExtraSpawner_SetCarePackageWeaponMods( "mp_weapon_softball", [] ) // was ["extended_ammo"]
	ExtraSpawner_SetCarePackageWeaponMods( "mp_weapon_pulse_lmg", [] )

	//AiDrone_SetDroneSpawnedByNPCRandomType( true ) // modified function in _ai_drone.nut, specialist grunts will spawn random drones
	AiDrone_SetDroneSpawnedByNPCForceDie( true ) // modified function in _ai_drone.nut, drones spawned by npcs will be destroyed right after it's owner's death
	AiSoldiers_EnablePilotEngageChatter( false ) // modified function in _ai_soldiers.gnut, npcs won't call out if they meet players(since we want to make players grunts)

	Wallrun_EnableProtectionForRodeoPlayerAgainstNPCs( false ) // modified function in class_wallrun.gnut. disable damage immune against npcs while rodeoing
}

//////////////////////////////////////////////
///// EXTRASPAWNER SETTINGS FUNCTION END /////
//////////////////////////////////////////////



///////////////////////////////////
///// CLASS UTILITY FUNCTIONS /////
///////////////////////////////////

// shared func
void function GruntMode_RegisterPlayerClass( string className, void functionref( entity ) classLoadoutFunction, bool isSpecialist )
{
	if ( className in file.gruntModeClasses ) // already registered?
	{
		print( "[GRUNTMODE] " + className + " class has already been registered!" )
		return
	}
	PlayerClassStruct newCLass
	newCLass.className = className
	newCLass.classLoadoutFunction = classLoadoutFunction
	newCLass.isSpecialist = isSpecialist
	file.gruntModeClasses[ className ] <- newCLass
}

// shared func
bool function GruntMode_IsSpecialistClass( entity player )
{
	if ( !( player in file.playerClassTable ) )
		return false
	string className = file.playerClassTable[ player ]
	if ( !( className in file.gruntModeClasses ) )
		return false
	// find player's class
	PlayerClassStruct playerClass = file.gruntModeClasses[ className ]
	return playerClass.isSpecialist
}

array<string> function GetGruntModeValidClasses()
{
	array<string> classes
	foreach ( string className, PlayerClassStruct classStruct in file.gruntModeClasses )
	{
		//print( "[GRUNTMODE] found class: " + className )
		classes.append( className )
	}
	return classes
}


///////////////////////////////////////
///// CLASS UTILITY FUNCTIONS END /////
///////////////////////////////////////