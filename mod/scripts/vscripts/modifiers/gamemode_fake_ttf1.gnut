global function Modded_Gamemode_Fake_Titanfall1_Init

const int TITAN_SHIELD_BASE = 1000 // every chassis will have 1000 shield by default
const int TITAN_SHIELD_PER_SEGMENT = 500 // shield value scale with health segments
const int TITAN_HEALTH_PER_SEGMENT = 1500
const float TITAN_DOOMED_HEALTH_FRAC = 1.0 // fake ttf1 behavior: doomed health is almost same as undoomed health
// needs to rework most of the titancore ability before we can use this...
const bool DISABLE_TITAN_CORE_ON_DOOM = false

const string ANSI_COLOR_END = "\x1b[0m"
const string ANSI_COLOR_BLUE = "\x1b[38;5;81m"
const string ANSI_COLOR_RED = "\x1b[38;5;196m"
const string ANSI_COLOR_ORANGE = "\x1b[38;5;208m"
const string ANSI_COLOR_YELLOW = "\x1b[38;5;11m"

const array<string> CONNECTING_NOTIFICATIONS = 
[
	ANSI_COLOR_YELLOW + "启用了仿照泰坦陨落1的泰坦血量机制" + ANSI_COLOR_END,
	ANSI_COLOR_ORANGE + "泰坦在被拔去电池后可以被直接攻击电池舱，造成破盾伤害" + ANSI_COLOR_END,
	ANSI_COLOR_ORANGE + "泰坦护盾自动恢复，但护盾仅提供减伤，无法完全免除伤害" + ANSI_COLOR_END,
	ANSI_COLOR_ORANGE + "泰坦蓝血上限下降，黄血上限增加但会自动流失" + ANSI_COLOR_END,
    ANSI_COLOR_ORANGE + "泰坦自带快速恢复冲刺，若装备涡轮引擎将替换为超级核心" + ANSI_COLOR_END,
]

// hard to control.. respawn almost didn't add any support for ttf1-like core meter
// needs to rework most of the titancore ability before we can use this...

struct CoreWeapon
{
    string weapon
    array<string> mods
}

struct
{
    table<entity, CoreWeapon> soulStoredCoreWeapon
} file

void function Modded_Gamemode_Fake_Titanfall1_Init()
{
    // notifications
    AddCallback_OnClientConnected( OnClientConnected )

    // rodeo modifier settings!
    Rodeo_SetBatteryRemovalDamageFlags( damageTypes.rodeoBatteryRemoval | DF_BYPASS_SHIELD ) // rodeo will deal bvpass_shield damage to titans
    Rodeo_SetBatteryRemovalDamageScale( 0.8 ) // take less damage from battery removal( current: 1500 -> 1200 )
    Rodeo_SetRodeoGrenadeDamageScale( 0.6667 ) // take higher damage from rodeo grenades( current: 750 -> ~1000 )
    //Rodeo_BatteryRemovalKillsDoomedTitan( false ) // rodeo battery removal and grenade won't instant kill doomed titan
    Rodeo_SetBatteryRegenScale( 1.3333 ) // regen more health from batteries( current: 750 -> ~1000 )

    // classic rodeo modifier settings!
    ClassicRodeo_SetEnabled( true ) // enable fake-ttf1 rodeo style
	ClassicRodeo_SetRodeoAttackDamageScale( 1.0 ) // damage taken from classic rodeo
	ClassicRodeo_BatteryContainerOnlyProtectsOnce( true ) // battery container can only protect once

    // death package
    DeathPackage_TitanAlwaysGibOnDeath( false ) // titan won't alwasy be gibbed on death

    AddCallback_OnTitanGetsNewTitanLoadout( OnTitanGetsLoadout ) // titan settings
    AddCallback_OnTitanDoomed( OnTitanDoomed ) // doomed settings
    // hard to control.. respawn almost didn't add any support for ttf1-like core meter
    RegisterSignal( "PendingEarnModeChange" )
    AddCallback_OnTitanUndoomed( OnTitanUndoomed ) // modified callback in _titan_health.gnut. undoomed settings
    AddCallback_OnPilotBecomesTitan( OnPlayerBecomesTitan )
}

void function OnClientConnected( entity player )
{
	foreach ( string message in CONNECTING_NOTIFICATIONS )
		Chat_ServerPrivateMessage( player, message, false, false )
}

void function OnTitanGetsLoadout( entity titan, TitanLoadoutDef titanLoadout )
{
    //print( "Titan got loadout!" )
    thread SetupTTF1StyleTitan( titan, titanLoadout )
}

void function SetupTTF1StyleTitan( entity titan, TitanLoadoutDef titanLoadout )
{
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return

    titan.EndSignal( "OnDestroy" )
    soul.EndSignal( "OnDestroy" )

    // shield regen
    TitanHealth_SetSoulEnableShieldRegen( soul, true )
	TitanHealth_SetSoulShieldRegenDelay( soul, TITAN_SHIELD_REGEN_DELAY )
	TitanHealth_SetSoulShieldRegenTime( soul, TITAN_SHIELD_REGEN_TIME )
	TitanHealth_SetSoulShieldDamageReductionScale( soul, 0.7 )
    // doomed state
    TitanHealth_SetSoulInfiniteDoomedState( soul, false )
    TitanHealth_SetSoulDoomedHealthLossDamage( soul, 0.8 )

    // wait for next frame before we apply and classmods
    WaitEndFrame() 

    // health
    thread TitanHealthWatcher( titan ) // prevent changing health midway

    // class mods
    // add turbo titan, replace turbo engine with hyper core
    if ( titanLoadout.setFileMods.contains( "pas_mobility_dash_capacity" ) ) // has turbo engine
    {
        // change to PAS_HYPER_CORE
        GivePassive( soul, ePassives.PAS_HYPER_CORE )
        if ( TitanDamageRewardsTitanCoreTime() )
        {
            SoulTitanCore_SetNextAvailableTime( soul, 0.20 )
            GiveOffhandElectricSmoke( titan )
        }
    }
    // these mods gets applied on player embark!
    titanLoadout.setFileMods.removebyvalue( "pas_mobility_dash_capacity" )
    titanLoadout.setFileMods.append( "turbo_titan" )
}

void function TitanHealthWatcher( entity titan )
{
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return
    soul.EndSignal( "OnDestroy" )

    // initial setup
    int segments = titan.GetMaxHealth() / 2500 // hardcoded
    soul.SetShieldHealthMax( TITAN_SHIELD_BASE + segments * TITAN_SHIELD_PER_SEGMENT ) // 1000(was 1250) shield per segment
    soul.SetShieldHealth( soul.GetShieldHealthMax() )
    titan.SetMaxHealth( segments * TITAN_HEALTH_PER_SEGMENT ) // 1500 health per segment
    titan.SetHealth( titan.GetMaxHealth() )

    int startingMaxHealth = titan.GetMaxHealth()
    // modified function in sh_titan_triple_health.gnut
    TitanHealth_SetSoulSegmentHealthOverride( soul, TITAN_HEALTH_PER_SEGMENT )
    // fake ttf1 behavior: doomed health is almost same as undoomed health
    // modified function in sh_titan_soul.gnut
    TitanSoul_SetSoulDoomedHealthOverride( soul, int( titan.GetMaxHealth() * TITAN_DOOMED_HEALTH_FRAC ) )
    // start watching
    while ( true )
    {
        WaitFrame() // always wait before each loop

        titan = soul.GetTitan() // update titan each loop
        if ( !IsAlive( titan ) )
            continue
        //print( "startingMaxHealth: " + string( startingMaxHealth ) )
        //print( "current max health: " + string( titan.GetMaxHealth() ) )
        segments = titan.GetMaxHealth() / 2500 // keep updating
        if ( startingMaxHealth != titan.GetMaxHealth() ) // max health updated!
        {
            //print( "Health Updated!" )
            float healthFrac = GetHealthFrac( titan )
            titan.SetMaxHealth( segments * TITAN_HEALTH_PER_SEGMENT ) // 1500 health per segment
            titan.SetHealth( int( titan.GetMaxHealth() * healthFrac ) )
            // update starting max health
            startingMaxHealth = titan.GetMaxHealth()
            // update segment health
            TitanHealth_SetSoulSegmentHealthOverride( soul, TITAN_HEALTH_PER_SEGMENT )
            // update doomed health
            TitanSoul_SetSoulDoomedHealthOverride( soul, int( titan.GetMaxHealth() * TITAN_DOOMED_HEALTH_FRAC ) )
        }
    }
}

void function OnTitanDoomed( entity titan, var damageInfo )
{
    if ( !IsAlive( titan ) ) // titan may get killed
        return
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return
    // fake ttf1 behavior: titan loses shields on doomed
    soul.SetShieldHealth( 0 )

    #if DISABLE_TITAN_CORE_ON_DOOM
        // hard to control.. respawn almost didn't add any support for ttf1-like core meter
        // fake ttf1 behavior: titan loses core ability on doomed
        entity coreWeapon = titan.GetOffhandWeapon( OFFHAND_EQUIPMENT )
        if ( IsValid( coreWeapon ) )
        {
            bool ignoreModeChange = false
            if ( TitanCoreInUse( titan ) ) // start when core still using!
            {
                //print( "Titan core still using!" )
                SoulTitanCore_SetExpireTime( soul, Time() ) // stop core immediately
                ignoreModeChange = true // core disabling will change earn mode, ignore it
            }
            OnAbilityEnd_TitanCore( coreWeapon ) // clean up core effect

            if ( titan.IsPlayer() )
                thread UpdateEarnMeterMode( titan, eEarnMeterMode.DISABLED, ignoreModeChange ) // try to update icon

            CoreWeapon weaponStruct
            weaponStruct.weapon = coreWeapon.GetWeaponClassName()
            weaponStruct.mods = coreWeapon.GetMods()
            file.soulStoredCoreWeapon[ soul ] <- weaponStruct

            titan.TakeOffhandWeapon( OFFHAND_EQUIPMENT )
        }
    #endif // DISABLE_TITAN_CORE_ON_DOOM
}

#if DISABLE_TITAN_CORE_ON_DOOM
void function UpdateEarnMeterMode( entity player, int mode, bool ignoreEarnModeChange )
{
    player.Signal( "PendingEarnModeChange" )
    player.EndSignal( "PendingEarnModeChange" )
    player.EndSignal( "OnDestroy" )
    int starterEarnMode = PlayerEarnMeter_GetMode( player )
    WaitFrame()

    if ( !ignoreEarnModeChange && starterEarnMode != PlayerEarnMeter_GetMode( player ) ) // earn mode updated midway!
        return
    PlayerEarnMeter_SetMode( player, mode )
}
#endif // DISABLE_TITAN_CORE_ON_DOOM

// hard to control.. respawn almost didn't add any support for ttf1-like core meter
void function OnTitanUndoomed( entity titan, int numSegments )
{
    if ( !IsAlive( titan ) )
        return
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return

    #if DISABLE_TITAN_CORE_ON_DOOM
        // try to retrieve core ability
        if ( soul in file.soulStoredCoreWeapon )
        {
            if ( titan.IsPlayer() )
            {
                titan.Signal( "PendingEarnModeChange" ) // stop other earnmeter update function
                PlayerEarnMeter_SetMode( titan, eEarnMeterMode.CORE )
            }

            CoreWeapon weaponStruct = clone file.soulStoredCoreWeapon[ soul ]
            if ( !IsValid( titan.GetOffhandWeapon( OFFHAND_EQUIPMENT ) ) )
                titan.GiveOffhandWeapon( weaponStruct.weapon, OFFHAND_EQUIPMENT, weaponStruct.mods )

            delete file.soulStoredCoreWeapon[ soul ]
        }
    #endif // DISABLE_TITAN_CORE_ON_DOOM
}

void function OnPlayerBecomesTitan( entity player, entity titan )
{
    #if DISABLE_TITAN_CORE_ON_DOOM
        thread DisableCoreEarnMode( player )
    #endif // DISABLE_TITAN_CORE_ON_DOOM
}

#if DISABLE_TITAN_CORE_ON_DOOM
void function DisableCoreEarnMode( entity player )
{
    player.EndSignal( "PendingEarnModeChange" )
    player.EndSignal( "OnDestroy" )
    WaitFrame()

    entity soul = player.GetTitanSoul()
    if ( !IsValid( soul ) )
        return

    if ( soul.IsDoomed() )
    {
        OnThreadEnd
        (
            function(): ( player )
            {
                PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
            }    
        )
        //print( "soul doomed! disabling core ability" )
        // fake ttf1 behavior: titan loses core ability on doomed
        player.Signal( "PendingEarnModeChange" ) // stop other earnmeter update function and run into OnThreadEnd()
    }
}
#endif // DISABLE_TITAN_CORE_ON_DOOM