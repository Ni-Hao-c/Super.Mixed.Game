global function Nessie_Useful_Commands_Init

global function NessieCommands_EnableKillCommands
global function NessieCommands_EnableUtilCommands // weapon drop stuffs

struct
{
	bool killCommandsEnabled
	bool utilCommandsEnabled

	table<entity, float> playerNextKillCommandAllowedTime
	table<entity, bool> playerGainSpecialLoadout
} file

// BATTERY_SPAWNERS array in nessy.gnut controls availability
void function Nessie_Useful_Commands_Init()
{
	// custom suicide damagesource
	RegisterWeaponDamageSource( "farewell_cruel_world", "Farewell World" )
	// overrides northstar default killcommand
	AddClientCommandCallback( "kill", SelfKillCommand )
	AddClientCommandCallback( "explode", SelfExplodeCommand )
	//
	AddClientCommandCallback( "dissolve", SelfDissolveCommand )
	AddClientCommandCallback( "pinkmist", SelfPinkMistCommand )
	AddClientCommandCallback( "ragdoll", SelfRagdollDeathCommand )

	AddClientCommandCallback( "kill_admin", AdminSelfKill )
	AddClientCommandCallback( "explode_admin", AdminSelfExplode )

	AddClientCommandCallback( "dropweapon", PlayerDropActiveWeapon )
	AddClientCommandCallback( "selfdamage", OPSelfDamage )
	AddClientCommandCallback( "selfgib", OPSelfGib )
	AddClientCommandCallback( "special", CC_GiveSpecialLoadout )

	// callbacks
	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
}

void function NessieCommands_EnableKillCommands( bool enable )
{
	file.killCommandsEnabled = enable
}

void function NessieCommands_EnableUtilCommands( bool enable )
{
	file.utilCommandsEnabled = enable
}

void function OnClientConnected( entity player )
{
	// kill command
	file.playerNextKillCommandAllowedTime[ player ] <- 0.0
	// special loadout
	file.playerGainSpecialLoadout[ player ] <- false
}

void function OnPlayerRespawned( entity player )
{
	if ( file.playerGainSpecialLoadout[ player ] )
		DisableBoostBar( player )
}

void function OnPlayerChangeLoadout( entity player, PilotLoadoutDef p )
{
	if ( file.playerGainSpecialLoadout[ player ] )
		GivePlayerSpecialLoadout( player )
}

bool function PlayerCanUseKillCommand( entity player )
{
	if ( !IsAlive( player ) )
		return false

	if ( GetConVarBool( "sv_cheats" ) || GetConVarBool( "ns_allow_kill_commands" ) )
		return true // convar killcommand toggle ignore modified checks

	if ( !file.killCommandsEnabled ) // not using script killcommand toggle!
		return false

	if ( Time() < file.playerNextKillCommandAllowedTime[ player ] ) // in cooldown!
		return false
	if ( GetGameState() < eGameState.Playing ) // suicide only allowed after game start!
		return false
	if ( player.IsTitan() ) // no suicide allowed for titans
		return false

	// set killcommand cooldown
	const float KILL_COMMAND_COOLDOWN = 5.0
	file.playerNextKillCommandAllowedTime[ player ] = Time() + KILL_COMMAND_COOLDOWN

	// all checks passed
	return true
}

void function KillCommandPlayerScorePunish( entity player )
{
	if ( GetConVarBool( "sv_cheats" ) || GetConVarBool( "ns_allow_kill_commands" ) )
		return // convar killcommand toggle ignore punishment

	int kills = player.GetPlayerGameStat( PGS_KILLS )
	if ( kills > 0 )
	{
		//player.SetPlayerGameStat( PGS_KILLS, kills - 1 )
		//player.SetPlayerGameStat( PGS_PILOT_KILLS, player.GetPlayerGameStat( PGS_ASSAULT_SCORE ) - 1 )
		if ( IsFFAGame() ) // for ffa
		{
			player.SetPlayerGameStat( PGS_ASSAULT_SCORE, player.GetPlayerGameStat( PGS_ASSAULT_SCORE ) - 1 )
			AddTeamScore( player.GetTeam(), -1 )
		}
	}
}

bool function SelfKillCommand( entity player, array<string> args )
{
	if ( !PlayerCanUseKillCommand( player ) )
		return true

	int damageTypes
	if ( args.len() > 0 )
	{
		switch ( args[0] )
		{
			case "instant":
				damageTypes = DF_INSTANT
				break
			case "knockback":
				damageTypes = DF_KNOCK_BACK
				break
		}
	}

	player.Die( player, player, { damageSourceId = eDamageSourceId.farewell_cruel_world, scriptType = damageTypes } )
	print( "[NESSIE] " + player.GetPlayerName() + " suicided!!" )

	KillCommandPlayerScorePunish( player )

	return true
}

bool function SelfExplodeCommand( entity player, array<string> args )
{
	if ( !PlayerCanUseKillCommand( player ) )
		return true

	player.Die( player, player, { damageSourceId = eDamageSourceId.farewell_cruel_world } )
	print( "[NESSIE] " + player.GetPlayerName() + " self exploded!!" )

	// gib effect
	player.Gib( player.GetVelocity() )
	if ( !player.IsMechanical() )
		EmitSoundAtPosition( TEAM_UNASSIGNED, player.GetOrigin(), "death.pinkmist" )

	KillCommandPlayerScorePunish( player )

	return true
}

bool function SelfDissolveCommand( entity player, array<string> args )
{
	if ( !PlayerCanUseKillCommand( player ) )
		return true

	player.Die( player, player, { damageSourceId = eDamageSourceId.farewell_cruel_world } )
	print( "[NESSIE] " + player.GetPlayerName() + " self dissolved!!" )
	thread DelayedDissolvePlayer( player, ENTITY_DISSOLVE_CHAR )

	KillCommandPlayerScorePunish( player )

	return true
}

void function DelayedDissolvePlayer( entity player, int dissovleType )
{
	WaitFrame() // wait for next frame so we don't mess up ragdolls( seems can't fix )

	if ( IsValid( player ) && !IsAlive( player ) )
	{
		player.Dissolve( dissovleType, Vector( 0, 0, 0 ), 500 )
		EmitSoundAtPosition( TEAM_UNASSIGNED, deadEnt.GetOrigin(), "Object_Dissolve" )
	}
}

bool function SelfPinkMistCommand( entity player, array<string> args )
{
	if ( !PlayerCanUseKillCommand( player ) )
		return true

	player.Die( player, player, { scriptType = DF_DISSOLVE | DF_GIB, damageSourceId = eDamageSourceId.farewell_cruel_world } )
	print( "[NESSIE] " + player.GetPlayerName() + " self pinkmisted!!" )

	KillCommandPlayerScorePunish( player )

	return true
}

bool function SelfRagdollDeathCommand( entity player, array<string> args )
{
	if ( !PlayerCanUseKillCommand( player ) )
		return true

	player.Die( player, player, { damageSourceId = eDamageSourceId.farewell_cruel_world } )
	// ragdoll death better play 1 frame of death animation before actually become ragdoll
	thread DelayedRagdollPlayer( player )
	print( "[NESSIE] " + player.GetPlayerName() + " self ragdolled!!" )

	KillCommandPlayerScorePunish( player )

	return true
}

void function DelayedRagdollPlayer( entity player )
{
	vector ragdollVel = player.GetVelocity() * 5 // add a bit velocity so ragdoll can fly
	player.EndSignal( "OnDestroy" )

	WaitEndFrame() // wait so we don't mess up client prediction
	if ( !IsAlive( player ) )
		player.BecomeRagdoll( ragdollVel, false )
}

bool function AdminSelfKill( entity player, array<string> args )
{
	if( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false

	if ( !IsAlive( player ) )
		return true

	thread AdminHiddenDeathThink( player )
	player.Die( player, player )
	return true
}

bool function AdminSelfExplode( entity player, array<string> args )
{
	if( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false

	if ( !IsAlive( player ) )
		return true

	thread AdminHiddenDeathThink( player )
	player.Die( player, player, { scriptType = DF_GIB } )
	return true
}

void function AdminHiddenDeathThink( entity player )
{
	player.EndSignal( "OnDestroy" )

	// hide any death message that count happen on this player
	ForcedRespawn_SetDisabledForPlayer( player, true )
	EntityKilledEvent_SetDisabledForEntity( player, true )

	player.WaitSignal( "OnRespawned" ) // wait for respawn
	// reset to normal
	ForcedRespawn_SetDisabledForPlayer( player, false )
	EntityKilledEvent_SetDisabledForEntity( player, false )
}

bool function PlayerCanUseUtilityCommand( entity player )
{
	if ( !IsAlive( player ) )
		return false

	if ( GetConVarBool( "sv_cheats" ) || GetConVarBool( "ns_allow_kill_commands" ) )
		return true // convar killcommand toggle ignore modified checks

	if ( !file.utilCommandsEnabled ) // not using script killcommand toggle!
		return false

	// all checks passed
	return true
}

bool function PlayerDropActiveWeapon( entity player, array<string> args )
{
	if ( !PlayerCanUseUtilityCommand( player ) ) // main check
		return false // tell player there's no such command

	if ( player.IsTitan() ) // ttf2 titan shouldn't drop any weapon!
		return true
	entity activeWeapon = player.GetActiveWeapon()
	if( !IsValid( activeWeapon ) )
		return true
	// hack here: if player holding a mp_weapon_gunship_missile with "pilot_emptyhanded", we don't do anything
	if ( IsPilotEmptyHandWeapon( activeWeapon ) )
		return true

	player.DropWeapon( activeWeapon )
	print( "[NESSIE] " + player.GetPlayerName() + " dropped weapon!" )
	// player has no weapon! want to give them a emptyhand!
	if ( player.GetMainWeapons().len() == 0 )
		thread PlayerEmptyHandThink( player )
	return true
}

void function PlayerEmptyHandThink( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )

	// check if we already have emptyhand
	foreach ( entity weapon in player.GetMainWeapons() )
	{
		if ( IsPilotEmptyHandWeapon( weapon ) )
			return
	}

	// emptyhand prevents player from picking up other weapons...
	// if player is holding use, we need to re-enable their weapon pickup
	// by temp destroy the emptyhand weapon
	entity emptyHand = player.GiveWeapon( "mp_weapon_gunship_missile", ["pilot_emptyhanded"] )
	while ( true )
	{
		//print( "Waiting for player get another weapon" )
		WaitFrame()
		if ( player.IsInputCommandHeld( IN_USE ) ) // no need to support controller?
		{
			if ( IsValid( emptyHand ) )
				emptyHand.Destroy()
		}
		else
		{
			if ( !IsValid( emptyHand ) )
				emptyHand = player.GiveWeapon( "mp_weapon_gunship_missile", ["pilot_emptyhanded"] )
		}

		// wait for player pick up another weapon
		array<entity> validWeapons
		foreach ( entity weapon in player.GetMainWeapons() )
		{
			if ( IsPilotEmptyHandWeapon( weapon ) )
				continue

			validWeapons.append( weapon )
		}
		if ( validWeapons.len() >= 1 )
			break
	}

	if ( IsValid( emptyHand ) )
		emptyHand.Destroy()
}

bool function IsPilotEmptyHandWeapon( entity weapon )
{
	return weapon.GetWeaponClassName() == "mp_weapon_gunship_missile" && ( weapon.HasMod( "pilot_emptyhanded" ) || weapon.HasMod( "pilot_emptyhanded_boost" ) )
}

bool function OPSelfDamage( entity player, array<string> args )
{
	if( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false
    if( IsAlive( player ) )
	{
		// don't add "damageSourceId = damagedef_suicide", it's a kind of force kill!
        player.TakeDamage( 10000, player, player, { damageSourceId = eDamageSourceId.farewell_cruel_world } ) 
		print( "[NESSIE] Admin " + player.GetPlayerName() + " self damaged!" )
	}
    return true
}

bool function OPSelfGib( entity player, array<string> args )
{
	if( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false
	if( IsAlive( player ) )
	{
		// don't add "damageSourceId = damagedef_suicide", it's a kind of force kill! 
		// damageType = DF_GIB will cause player's death blur become red?
        player.TakeDamage( 10000, player, player, { scriptType = DF_GIB, damageSourceId = eDamageSourceId.farewell_cruel_world } ) 
		print( "[NESSIE] Admin " + player.GetPlayerName() + " self gibbed!" )
	}
	return true
}

// special loadout
bool function CC_GiveSpecialLoadout( entity player, array<string> args )
{
	if ( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false

	array<entity> targets
	if ( args.len() > 0 )
		targets = GetSpecialLoadoutPlayers( args[0] )
	if ( targets.len() < 0 )
		return true

	foreach ( entity player in targets )
		file.playerGainSpecialLoadout[ player ] = !file.playerGainSpecialLoadout[ player ]

	return true
}

array<entity> function GetSpecialLoadoutPlayers( string targetType )
{
	array<entity> players
	switch ( targetType )
	{
		case "all":
			players = GetPlayerArray()
			break
		default:
			players = GetPlayersFromNamePiece( targetType )
			break
	}

	return players
}

array<entity> function GetPlayersFromNamePiece( string namePiece )
{
    array<entity> foundPlayers
    foreach ( entity player in GetPlayerArray() )
    {
        string name = player.GetPlayerName()
        if ( name.tolower().find( namePiece.tolower() ) != null )
            foundPlayers.append( player )
    }

    return foundPlayers
}

void function DisableBoostBar( entity player )
{
    thread DisableBoostBar_Threaded( player )
}

void function DisableBoostBar_Threaded( entity player )
{
    WaitFrame() // wait for player earn meter being set up
    if( IsValid( player ) )
        PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}

void function GivePlayerSpecialLoadout( entity player )
{
	thread GivePlayerSpecialLoadout_Threaded( player )
}

void function GivePlayerSpecialLoadout_Threaded( entity player )
{
	WaitFrame() // wait for anyother things set up
	if ( !IsAlive( player ) )
		return
	if ( !file.playerGainSpecialLoadout[ player ] )
		return

	foreach ( entity weapon in player.GetOffhandWeapons() )
		player.TakeWeaponNow( weapon.GetWeaponClassName() )
	player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_SPECIAL, ["zipline_gun"] )
	player.GiveOffhandWeapon( "mp_ability_heal", OFFHAND_INVENTORY, ["jump_pad", "infinite_jump_pad"] )
	player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_ORDNANCE, ["wraith_portal", "amped_tacticals"] )
	player.GiveOffhandWeapon( "mp_weapon_grenade_gravity", OFFHAND_ANTIRODEO, ["gravity_lift"] )
}
//