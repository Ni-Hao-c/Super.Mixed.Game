global function Nessie_Funny_Functions_Init

// funny stuffs with clientcommand!
global function NessieFunny_EnableClientCommands

global function RGB_Highlight
global function TitleFlash

global function RainbowPlayerSkin
global function RainbowWeaponSkin

global function RGY_BatterySkin

// holoflash
global function HoloFlash_Loop
global function HoloFlash

// head
global function PlayerPulseBladeModel_HideBodyAndLegs
global function CreatePulseBladeHead
global function CreateWoundedHead
global function BindPulseBladeHeadToPlayer
global function BindeWoundedHeadToPlayer

// loadout
global function BecomeApexLegend

// rainbow dome
global function CreateRainbowDomeShield

// barrel spawn
global function CreatePhysicsBarrel

struct
{
	bool clientCommandsEnabled

	table<entity, bool> playerHasRGBHighlight
	table<entity, bool> playerHasRainbowSkin
	table<entity, entity> playerFlipperMover
} file

void function Nessie_Funny_Functions_Init()
{
	// precaching
	PrecacheModel( ROCKET_TURRET_MODEL )

	// signals
	// rgb highlight
    RegisterSignal( "StartRGBHighlight" )
	RegisterSignal( "EndRGBHighlight" )
	AddClientCommandCallback( "rgbself", CC_SelfRGBHighlight )

	// sb title
    RegisterSignal( "StartSBTitle" )
	RegisterSignal( "EndSBTitle" )
	//AddClientCommandCallback( "sbself", CC_SelfIMSBTitle )

	// rainbow skin
	RegisterSignal( "StartRainbowPlayer" )
	RegisterSignal( "EndRainbowPlayer" )
	RegisterSignal( "StartRainbowWeapon" )
	RegisterSignal( "EndRainbowWeapon" )

	// rgy battery
	RegisterSignal( "StartRGYBattery" )
	RegisterSignal( "EndRGYBattery" )

	// holo flash
	RegisterSignal( "StartHoloFlash" )
	RegisterSignal( "EndHoloFlash" )

	// self flip
	RegisterSignal( "EndFlipper" )
	AddClientCommandCallback( "flipself", CC_FlipPlayerSelf )

	// barrel
	//PrecacheModel( $"models/containers/barrel.mdl" ) // always precache barrel model
	//AddClientCommandCallback( "spawnbarrel", CC_ThrowABarrel )

	// others
	//AddClientCommandCallback( "rainbowdome", CC_SpawnRainbowDome )
	AddClientCommandCallback( "nessyoutfit", CC_SpawnNessyOutfit )

	// callbacks
	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnDecoyCreated( OnDecoyCreated )
	AddCallback_OnModdedDecoyCreated( OnDecoyCreated )
}

// callbacks
void function OnClientConnected( entity player )
{
	file.playerHasRGBHighlight[ player ] <- false
	file.playerHasRainbowSkin[ player ] <- false
	file.playerFlipperMover[ player ] <- null
}

void function OnDecoyCreated( entity decoy )
{
	entity bossPlayer = decoy.GetBossPlayer()
	if ( IsValid( bossPlayer ) )
	{
		// inherit rgb highlight to decoy
		if ( file.playerHasRGBHighlight[ bossPlayer ] )
			thread RGB_Highlight( decoy, true )
		// inherit rainbow skin to decoy
		if ( file.playerHasRainbowSkin[ bossPlayer ] )
			thread RainbowPlayerSkin( decoy )
	}
}

// client commands
void function NessieFunny_EnableClientCommands( bool enable )
{
	file.clientCommandsEnabled = enable
}

bool function CC_SpawnRainbowDome( entity player, array<string> args )
{
	if ( !GetConVarBool( "sv_cheats" ) && !file.clientCommandsEnabled )
		return false

	if ( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false

	CreateRainbowDomeShield( player.GetOrigin(), < 0,0,0 >, -1 )
	return true
}

bool function CC_SpawnNessyOutfit( entity player, array<string> args )
{
	if ( !GetConVarBool( "sv_cheats" ) && !file.clientCommandsEnabled )
		return false

	SpawnNessyOutfit( player )
	return true
}

bool function CC_SelfRGBHighlight( entity player, array<string> args )
{
	if ( !GetConVarBool( "sv_cheats" ) && !file.clientCommandsEnabled )
		return false
	//if ( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
	//	return false

	thread RGB_Highlight( player, true )
	return true
}

bool function CC_SelfIMSBTitle( entity player, array<string> args )
{
	if ( !GetConVarBool( "sv_cheats" ) && !file.clientCommandsEnabled )
		return false

	if ( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false

	thread TitleFlash( player )
	return true
}

bool function CC_FlipPlayerSelf( entity player, array<string> args )
{
	if ( !GetConVarBool( "sv_cheats" ) && !file.clientCommandsEnabled )
		return false

	thread FlipperMoverThink( player )

	return true
}

bool function CC_ThrowABarrel( entity player, array<string> args )
{
	//if ( !GetConVarBool( "sv_cheats" ) && !file.clientCommandsEnabled )
	//	return false

	entity barrel = CreatePhysicsBarrel( player.EyePosition(), < 0, player.EyeAngles().y, 0 > )
    barrel.SetVelocity( player.GetViewVector() * 1000 )
	return true
}
//

void function RGB_Highlight( entity ent, bool showToAll = false, bool alwaysShow = false )
{
	ent.Signal( "StartRGBHighlight" )
	ent.EndSignal( "OnDestroy" )
	ent.EndSignal( "OnDeath" )
	ent.EndSignal( "StartRGBHighlight" )
	ent.EndSignal( "EndRGBHighlight" )

	// player specific
	if ( ent.IsPlayer() )
		file.playerHasRGBHighlight[ ent ] = true

	OnThreadEnd(
		function(): ( ent )
		{
			if( IsValid( ent ) )
			{
				// player specific
				if ( ent.IsPlayer() )
					file.playerHasRGBHighlight[ ent ] = false

				Highlight_ClearFriendlyHighlight( ent )
				Highlight_ClearEnemyHighlight( ent )
				Highlight_ClearNeutralHighlight( ent )
				Highlight_ClearOwnedHighlight( ent )
			}
		}
	)

	while ( true )
	{
		waitthread RGBHighlightThink( ent, showToAll, alwaysShow )
		ent.WaitSignal( "StopPhaseShift" ) // wait for exiting phase shift, we do highlight again!
	}
}

void function RGBHighlightThink( entity ent, bool showToAll = false, bool alwaysShow = false )
{
	ent.EndSignal( "StartPhaseShift" ) // phase shift cleans up highlight

	string highlightToUse = "sp_enemy_pilot" // normal one
	if ( alwaysShow )
		highlightToUse = "sp_friendly_hero" // this one will show across walls

	array<vector> colorArray = [ < 255,0,0 >, < 0,255,0 >, < 0,0,255 > ]
	int index = 0
	while( true )
	{
		WaitFrame()
		index = index == colorArray.len() - 1 ? 0 : index + 1

		// needs to update highlight for every loop... in case we can update it for later-joiners
		Highlight_SetFriendlyHighlight( ent, highlightToUse )
		Highlight_SetOwnedHighlight( ent, highlightToUse )
		ent.Highlight_SetParam( 1, 0, colorArray[index] ) // friendly
		ent.Highlight_SetParam( 3, 0, colorArray[index] ) // owned

		if( showToAll )
		{
			Highlight_SetEnemyHighlight( ent, highlightToUse )
			Highlight_SetNeutralHighlight( ent, highlightToUse )
			ent.Highlight_SetParam( 2, 0, colorArray[index] ) // enemy
			ent.Highlight_SetParam( 0, 0, colorArray[index] ) // neutral
		}
	}
}

void function TitleFlash( entity ent, array<string> titleArray = [ "我是傻逼", "傻逼是我" ] )
{
	if ( titleArray.len() <= 0 ) // no title given
		return
	ent.Signal( "StartSBTitle" )
	ent.EndSignal( "OnDestroy" )
	ent.EndSignal( "OnDeath" )
	ent.EndSignal( "StartSBTitle" )
	ent.EndSignal( "EndSBTitle" )

	int index = 0
	while( true )
	{
		WaitFrame()
		index = index == titleArray.len() - 1 ? 0 : index + 1

		ent.SetTitle( titleArray[index] )
	}
}

void function RainbowPlayerSkin( entity player )
{
	if( !PilotModelSupportsCamo( player ) )
		return
	player.Signal( "StartRainbowPlayer" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "StartRainbowPlayer" )
	player.EndSignal( "EndRainbowPlayer" )

	// player specific
	if ( player.IsPlayer() )
		file.playerHasRainbowSkin[ player ] = true

	OnThreadEnd
	(
		function(): ( player )
		{
			if ( IsValid( player ) )
			{
				// player specific
				if ( player.IsPlayer() )
					file.playerHasRainbowSkin[ player ] = false
			}
		}
	)

	array<int> camoIndexArray = [ 14, 81, 30, 31, 17, 83, 16 ] // skin 1
	// green, pink, black, white, orange, purple, gold
	int index = 0
	while( true )
	{
		WaitFrame()
		index = index == camoIndexArray.len() - 1 ? 0 : index + 1

		player.SetSkin( 1 )
		player.SetCamo( camoIndexArray[index] )
	}
}


array<asset> PILOT_MODELS_SUPPORTS_CAMO =
[
	$"models/humans/pilots/pilot_medium_stalker_m.mdl",
	$"models/humans/pilots/pilot_medium_stalker_f.mdl",
	$"models/humans/pilots/pilot_light_ged_m.mdl",
	$"models/humans/pilots/pilot_light_ged_f.mdl",
	$"models/humans/pilots/pilot_light_jester_m.mdl",
	$"models/humans/pilots/pilot_light_jester_f.mdl",
	$"models/humans/pilots/pilot_medium_reaper_m.mdl"
	$"models/humans/pilots/pilot_medium_reaper_f.mdl",
	$"models/humans/pilots/pilot_medium_geist_m.mdl",
	$"models/humans/pilots/pilot_medium_geist_f.mdl",
	$"models/humans/pilots/pilot_heavy_roog_m.mdl",
	$"models/humans/pilots/pilot_heavy_roog_f.mdl",
	$"models/humans/pilots/pilot_heavy_drex_m.mdl",
	$"models/humans/pilots/pilot_heavy_drex_f.mdl"
]

bool function PilotModelSupportsCamo( entity player )
{
	asset modelName = player.GetModelName()
	if ( PILOT_MODELS_SUPPORTS_CAMO.contains( modelName ) )
	 	return true

	return false
}

void function RainbowWeaponSkin( entity weaponOwner )
{
	weaponOwner.Signal( "StartRainbowWeapon" )
	weaponOwner.EndSignal( "OnDestroy" )
	weaponOwner.EndSignal( "OnDeath" )
	weaponOwner.EndSignal( "StartRainbowWeapon" )
	weaponOwner.EndSignal( "EndRainbowWeapon" )

	array<int> camoIndexArray = [ 14, 81, 30, 31, 17, 83, 16 ] // skin 1
	// green, pink, black, white, orange, purple, gold
	int index = 0
	while( true )
	{
		WaitFrame()
		index = index == camoIndexArray.len() - 1 ? 0 : index + 1

		foreach( entity weapon in weaponOwner.GetMainWeapons() )
		{
			weapon.SetSkin( 1 )
			weapon.SetCamo( camoIndexArray[index] )
		}
	}
}

void function RGY_BatterySkin( entity battery )
{
	if( battery.GetClassName() != "item_titan_battery" )
		return

	battery.Signal( "StartRGYBattery" )
	battery.EndSignal( "OnDestroy" )
	battery.EndSignal( "StartRGYBattery" )
	battery.EndSignal( "EndRGYBattery" )

	int index = 0
	while( true )
	{
		//print( "setting battery skin: " + string( index ) )
		WaitFrame()
		battery.SetSkin( index )
		Battery_StopFX( battery )
		if( index == 2 )
			index = 0
		else
			index++
	}
}

void function HoloFlash_Loop( entity player, float interval = 1.0 )
{
	player.Signal( "StartHoloFlash" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "StartHoloFlash" )
	player.EndSignal( "EndHoloFlash" )

	while( true )
	{
		wait interval

		HoloFlash( player )
	}
}

void function HoloFlash( entity player )
{
	int attachIndex = player.LookupAttachment( "CHESTFOCUS" )
	//StartParticleEffectOnEntity( player, GetParticleSystemIndex( GHOST_TRAIL_EFFECT ), FX_PATTACH_POINT_FOLLOW, attachIndex )
	entity flashFX = StartParticleEffectOnEntity_ReturnEntity( player, GetParticleSystemIndex( GHOST_FLASH_EFFECT ), FX_PATTACH_POINT, attachIndex )
	flashFX.SetOwner( player )
	SetTeam( flashFX, player.GetTeam() )
	flashFX.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY // not owner only
}

void function PlayerPulseBladeModel_HideBodyAndLegs( entity player )
{
	player.SetModel( $"models/humans/pilots/pilot_medium_reaper_m.mdl" )
	int bodyGroupIndex = player.FindBodyGroup( "body" )
	player.SetBodygroup( bodyGroupIndex, 1 )
	bodyGroupIndex = player.FindBodyGroup( "legs" )
	player.SetBodygroup( bodyGroupIndex, 0 )
}

// create a pulseblade pilot's head
entity function CreatePulseBladeHead( vector origin = < 0,0,0 >, vector angles = < 0,0,0 > )
{
	entity prop = CreatePropDynamic( $"models/humans/pilots/pilot_medium_reaper_m.mdl" )
	int bodyGroupIndex = prop.FindBodyGroup( "body" )
	prop.SetBodygroup( bodyGroupIndex, 1 )
	bodyGroupIndex = prop.FindBodyGroup( "legs" )
	prop.SetBodygroup( bodyGroupIndex, 0 )

	prop.SetOrigin( origin )
	prop.SetAngles( angles )

	return prop
}

// create a headshot head! this is not a model that can freely scale
entity function CreateWoundedHead( vector origin = < 0,0,0 >, vector angles = < 0,0,0 > )
{
	entity prop = CreatePropDynamic( $"models/humans/pilots/pilot_medium_reaper_m.mdl" )
	int bodyGroupIndex = prop.FindBodyGroup( "body" )
	prop.SetBodygroup( bodyGroupIndex, 1 )
	bodyGroupIndex = prop.FindBodyGroup( "legs" )
	prop.SetBodygroup( bodyGroupIndex, 0 )
	bodyGroupIndex = prop.FindBodyGroup( "head" )
	prop.SetBodygroup( bodyGroupIndex, 1 )

	prop.SetOrigin( origin )
	prop.SetAngles( angles )

	return prop
}

void function BindPulseBladeHeadToPlayer( entity player )
{
	entity head = CreatePulseBladeHead()

	// bind it to entity
	head.SetParent( player, "ORIGIN" )
	head.kv.modelscale = 5
	head.SetOrigin( < 0,0,-300 > ) // the head can be really high
	head.SetOwner( player )
	SetTeam( head, player.GetTeam() )
	head.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY // hide head for player
	thread TrackPlayerDeathForHeadProp( player, head )
	SetForceDrawWhileParented( head, true )
	
	//head.SetSkin( 2 )
	//head.SetCamo( 14 )
}

void function BindeWoundedHeadToPlayer( entity player )
{
	entity head = CreateWoundedHead()

	// bind it to entity
	head.SetParent( player, "ORIGIN" )
	head.kv.modelscale = 5
	head.SetOrigin( < 0,0,-300 > ) // the head can be really high
	head.SetOwner( player )
	SetTeam( head, player.GetTeam() )
	head.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY // hide head for player
	thread TrackPlayerDeathForHeadProp( player, head )
	SetForceDrawWhileParented( head, true )
}

void function TrackPlayerDeathForHeadProp( entity player, entity head )
{
	player.EndSignal( "OnDestroy" )

	WaitFrame() // since altpilot resets player's visibility everytime they respawn or changeloadout
	player.kv.VisibilityFlags = 0 // hide player

	OnThreadEnd(
		function():( head )
		{
			if ( IsValid( head ) )
				head.Destroy()
		}
	)

	player.WaitSignal( "OnDeath" )
	player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE // restore player visibility!
}

void function BecomeApexLegend( entity player, string model = "ash" ) // ash, blisk, jack, sarah
{
	TakeAllWeapons( player )

	player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_SPECIAL, ["wraith_phase"] )
	player.GiveOffhandWeapon( "mp_ability_heal", OFFHAND_ORDNANCE, ["octane_stim"] )
	player.GiveOffhandWeapon( "mp_weapon_hard_cover", OFFHAND_ANTIRODEO, ["deployable_dome_shield"] )
	player.GiveOffhandWeapon( "melee_pilot_emptyhanded", OFFHAND_MELEE, ["pushback_melee"] )
	player.GiveWeapon( "mp_weapon_gunship_missile", ["pilot_emptyhanded"] )
	player.SetActiveWeaponByName( "mp_weapon_gunship_missile" )
	player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), ["disable_doublejump","only_wallclimb", "pas_wallhang"] )

	asset modelToUse
	if ( model == "ash" )
		modelToUse = $"models/Humans/heroes/imc_hero_ash.mdl"
	else if ( model == "blisk" )
		modelToUse = $"models/Humans/heroes/imc_hero_blisk.mdl"
	else if ( model == "jack" )
		modelToUse = $"models/humans/heroes/mlt_hero_jack.mdl"
	else if ( model == "sarah" )
		modelToUse = $"models/humans/heroes/mlt_hero_sarah.mdl"

	player.SetModel( modelToUse )
	GivePassive( player, ePassives.PAS_STEALTH_MOVEMENT ) // hide jetpack flame
	Rodeo_SetStealthMovementDisabledForPlayer( player, true ) // disable stealth rodeo, so player will have jetpack modified only

	thread DisableBoostBar( player )
}

void function DisableBoostBar( entity player )
{
	WaitFrame()
	if( IsValid( player ) )
		PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}

entity function CreateRainbowDomeShield( vector origin, vector angles, float duration = -1, bool notSolid = false )
{
	entity bubbleShield = CreateEntity( "prop_dynamic" )
	bubbleShield.SetValueForModelKey( $"models/fx/xo_shield.mdl" )
	if ( !notSolid )
		bubbleShield.kv.solid = SOLID_VPHYSICS
    bubbleShield.kv.rendercolor = "81 130 151"
    bubbleShield.kv.contents = (int(bubbleShield.kv.contents) | CONTENTS_NOGRAPPLE)
	bubbleShield.SetOrigin( origin )
	bubbleShield.SetAngles( angles )
	bubbleShield.Hide()

     // Blocks bullets, projectiles but not players and not AI
	bubbleShield.kv.CollisionGroup = TRACE_COLLISION_GROUP_BLOCK_WEAPONS
	bubbleShield.SetBlocksRadiusDamage( true )
	DispatchSpawn( bubbleShield )
    array<entity> bubbleShieldFXs
	vector coloredFXOrigin = bubbleShield.GetOrigin()
	table bubbleShieldDotS = expect table( bubbleShield.s )

	//Create friendly and enemy colored particle systems
	entity rainbowColoredFX = StartParticleEffectInWorld_ReturnEntity( BUBBLE_SHIELD_FX_PARTICLE_SYSTEM_INDEX, coloredFXOrigin, angles )
	thread RainbowColorThink( rainbowColoredFX )
	bubbleShieldFXs.append( rainbowColoredFX )

    EmitSoundOnEntity( bubbleShield, "BubbleShield_Sustain_Loop" )
    thread CleanupBubbleShield( bubbleShield, bubbleShieldFXs, duration )

	return bubbleShield
}

void function RainbowColorThink( entity fx )
{
	fx.EndSignal( "OnDestroy" )

	vector rgb = < 255, 0, 0 > // start with red
	float segment = 25.5
	while ( true )
	{
		WaitFrame()

		// to < 255, 255, 0 >
		if ( rgb.x == 255 && rgb.y < 255 && rgb.z == 0 )
			rgb.y = min( 255, rgb.y + segment )
		// to < 0, 255, 0 >
		else if ( rgb.x > 0 && rgb.y == 255 && rgb.z == 0 )
			rgb.x = max( 0, rgb.x - segment )
		// to < 0, 255, 255 >
		else if ( rgb.x == 0 && rgb.y == 255 && rgb.z < 255 )
			rgb.z = min( 255, rgb.z + segment )
		// to < 0, 0, 255 >
		else if ( rgb.x == 0 && rgb.y > 0 && rgb.z == 255 )
			rgb.y = max( 0, rgb.y - segment )
		// to < 255, 0, 255 >
		else if ( rgb.x < 255 && rgb.y == 0 && rgb.z == 255 )
			rgb.x = min( 255, rgb.x + segment )
		// to < 255, 0, 0 >, a whole loop done
		else if ( rgb.x == 255 && rgb.y == 0 && rgb.z > 0 )
			rgb.z = max( 0, rgb.z - segment )

		//print( rgb )
		EffectSetControlPointVector( fx, 1, rgb )
	}
}

void function CleanupBubbleShield( entity bubbleShield, array<entity> bubbleShieldFXs, float fadeTime )
{
	bubbleShield.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function () : ( bubbleShield, bubbleShieldFXs )
		{
			if ( IsValid_ThisFrame( bubbleShield ) )
			{
				StopSoundOnEntity( bubbleShield, "BubbleShield_Sustain_Loop" )
				EmitSoundOnEntity( bubbleShield, "BubbleShield_End" )
				DestroyBubbleShield( bubbleShield )
			}

			foreach ( fx in bubbleShieldFXs )
			{
				if ( IsValid_ThisFrame( fx ) )
				{
					EffectStop( fx )
				}
			}
		}
	)

	if ( fadeTime == -1 ) // default
		WaitForever()
	else if ( fadeTime > 0 )
		wait fadeTime
}

// flipper
void function FlipperMoverThink( entity player )
{
	if ( !IsAlive( player ) ) // defensive fix
		return

	entity playerParent = player.GetParent()
	//print( "playerParent: " + string( playerParent ) )
	if ( IsValid( playerParent ) )
	{
		if ( playerParent == file.playerFlipperMover[ player ] )
			player.Signal( "EndFlipper" ) // try to end last flipper

		return // always return, whether player is parented with flipper or other entities
	}

	player.Signal( "EndFlipper" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "EndFlipper" )

	entity viewControl = CreateEntity( "point_viewcontrol" )
	viewControl.kv.spawnflags = 56 // infinite hold time, snap to goal angles, make player non-soli
	DispatchSpawn( viewControl )
	viewControl.EndSignal( "OnDestroy" )

	float offset = player.IsTitan() ? 500.0 : 200.0
	float playerViewYaw = player.EyeAngles().y
	float playerBackViewYaw = ClampAngle( playerViewYaw - 180 )
	viewControl.SetOrigin( player.GetOrigin() + AnglesToForward( < 0, playerBackViewYaw, 0 > ) * offset )
	viewControl.SetAngles( < 0, playerViewYaw, 0 > )
	player.SetViewEntity( viewControl, true )

	entity mover = CreateExpensiveScriptMover()
	mover.EndSignal( "OnDestroy" )

	mover.SetOrigin( player.GetOrigin() )
	mover.SetAngles( < 0, playerBackViewYaw, 0 > )
	player.SetParent( mover )
	file.playerFlipperMover[ player ] = mover

	OnThreadEnd
	(
		function(): ( player, mover, viewControl )
		{
			if ( IsValid( player ) )
			{
				player.ClearParent()
				FindNearestSafeSpotAndPutEntity( player, 1 )
				player.ClearViewEntity()
				file.playerFlipperMover[ player ] = null
			}

			if ( IsValid( viewControl ) )
				viewControl.Destroy()
			if ( IsValid( mover ) )
				mover.Destroy()
		}
	)

	int loopCount = 0
	while ( true )
	{
		float x = loopCount % 2 == 0 ? -180.0 : 0.0
		mover.NonPhysicsRotateTo( < x, playerBackViewYaw, 0 >, 0.3, 0, 0 )
		loopCount += 1
		wait 0.2
	}
}

// barrel
entity function CreatePhysicsBarrel( vector origin, vector angles )
{
	entity barrel = CreateEntity( "prop_physics" )
	barrel.SetValueForModelKey( $"models/containers/barrel.mdl" )
	barrel.SetModel( $"models/containers/barrel.mdl" )

	// spawn settings, copied from map_spawn.ent
	barrel.kv.spawnflags = "1"
	//barrel.kv.solid = SOLID_VPHYSICS
	barrel.kv.skin = "0"
	barrel.kv.shadowcastdist = "0"
	barrel.kv.rendermode = "0"
	barrel.kv.renderfx = "0"
	barrel.kv.rendercolor = "255 255 255"
	barrel.kv.renderamt = "255"
	barrel.kv.pressuredelay = "0"
	barrel.kv.physdamagescale = "0.1"
	barrel.kv.PerformanceMode = "0"
	barrel.kv.nodamageforces = "0"
	barrel.kv.minhealthdmg = "0"
	barrel.kv.mingpulevel = "0"
	barrel.kv.mincpulevel = "0"
	barrel.kv.maxgpulevel = "0"
	barrel.kv.maxcpulevel = "0"
	barrel.kv.massScale = "0"
	barrel.kv.inertiaScale = "1.0"
	barrel.kv.fadedist = "-1"
	barrel.kv.ExplodeRadius = "0"
	barrel.kv.ExplodeDamage = "0"
	barrel.kv.drawinfastreflection = "0"
	barrel.kv.disableX360 = "0"
	barrel.kv.disableshadows = "0"
	barrel.kv.disablereceiveshadows = "0"
	barrel.kv.Damagetype = "0"
	barrel.kv.damagetoenablemotion = "0"
	barrel.kv.allowfunnel = "1"
	barrel.kv.scale = "1"
	//barrel.kv.angles = "0 -26.065 0"
	//barrel.kv.origin = "3180 -4114 55.9981"
	//barrel.kv.targetname = "func_static_1"
	barrel.kv.physicsmode = "1"
	barrel.kv.forcetoenablemotion = "0"
	barrel.kv.classname = "prop_physics"

	barrel.SetOrigin( origin )
	barrel.SetAngles( angles )

	DispatchSpawn( barrel )
	barrel.SetModel( $"models/containers/barrel.mdl" )
	barrel.SetForceVisibleInPhaseShift( true )

	return barrel
}