global function MpTitanWeaponStormLauncher_Init

global function OnWeaponPrimaryAttack_StormLauncher
global function OnProjectileCollision_StormLauncher
global function OnWeaponActivate_StormLauncher
global function OnWeaponDeactivate_StormLauncher
#if SERVER
global function OnWeaponNpcPrimaryAttack_StormLauncher
#endif

// fx
const asset FX_EMP_FIELD					= $"P_xo_emp_field"
const asset FX_EMP_FIELD_1P					= $"P_body_emp_1P"
const asset FX_EMP_GLOW                     = $"P_titan_core_atlas_charge"
const asset FX_EMP_ORB                      = $"P_wpn_arcball_trail"

// damages
const int STORM_DAMAGE                  	= 5
const int STORM_DAMAGE_HEAVYARMOR       	= 205
const int STORM_DAMAGE_HEAVYARMOR_CHARGED   = 395 // charged storm ball
const float STORM_DAMAGE_INTERVAL			= 0.1 // no need to change this

const int STORM_BALL_DAMAGE_FLAGS			= DF_EXPLOSION | DF_GIB | DF_STOPS_TITAN_REGEN | DF_DOOM_FATALITY
const int STORM_LIGHTNING_DAMAGE_FLAGS      = DF_ELECTRICAL | DF_GIB | DF_DISSOLVE | DF_NO_HITBEEP // hide hitbeep, we do it in damaged sounds function

struct
{
	table<entity, float> nextDamagedSoundTime
} file

void function MpTitanWeaponStormLauncher_Init()
{
	PrecacheParticleSystem( $"wpn_arc_cannon_electricity_fp" )
	PrecacheParticleSystem( $"wpn_arc_cannon_electricity" )
	
    #if SERVER
        // adding a new damageSourceId. it's gonna transfer to client automatically
		RegisterWeaponDamageSource( "mp_titanweapon_storm_launcher", "Storm Launcher" )
		AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_storm_launcher, StormLauncher_DamagedTarget )
    #endif
}

var function OnWeaponPrimaryAttack_StormLauncher( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )

	return PlayerOrNPCFire_StormLauncher( attackParams, true, weapon )
}

void function OnProjectileCollision_StormLauncher( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
	#if SERVER
	// hardcoded fix...
	float creationTime = projectile.GetProjectileCreationTime()
	float maxFixTime = creationTime + 0.3 // hope this will pretty much fix client visual
	if ( Time() < maxFixTime )
		PlayImpactFXTable( pos, projectile, "exp_emp", SF_ENVEXPLOSION_INCLUDE_ENTITIES )
	#endif
}

// visual effect
void function OnWeaponActivate_StormLauncher( entity weapon )
{
	entity weaponOwner = weapon.GetWeaponOwner()
	thread DelayedMuzzleElectricStart( weapon, weaponOwner )
}

void function DelayedMuzzleElectricStart( entity weapon, entity weaponOwner )
{
	weapon.EndSignal( "WeaponDeactivateEvent" )
	
	WaitFrame()

	if ( IsValid( weapon ) && IsValid( weaponOwner ) && weapon == weaponOwner.GetActiveWeapon() )
	{
		//print( "starting arc effect" )
		if( weaponOwner.IsPlayer() )
		{
			entity modelEnt = weaponOwner.GetViewModelEntity()
	 		if( IsValid( modelEnt ) && EntHasModelSet( modelEnt ) )
			{
				//print( "starting player arc effect" )
				weapon.PlayWeaponEffectNoCull( $"wpn_arc_cannon_electricity_fp", $"wpn_arc_cannon_electricity", "muzzle_flash" )
				weapon.EmitWeaponSound( "arc_cannon_charged_loop" )
			}
		}
		else
		{
			weapon.PlayWeaponEffectNoCull( $"wpn_arc_cannon_electricity_fp", $"wpn_arc_cannon_electricity", "muzzle_flash" )
			weapon.EmitWeaponSound( "arc_cannon_charged_loop" )
		}
	}
}

void function OnWeaponDeactivate_StormLauncher( entity weapon )
{
	entity weaponOwner = weapon.GetWeaponOwner()
	if ( IsValid( weapon ) && IsValid( weaponOwner ) && weapon == weaponOwner.GetActiveWeapon() )
	{
		//print( "stopping arc effect" )
		weapon.StopWeaponEffect( $"wpn_arc_cannon_electricity_fp", $"wpn_arc_cannon_electricity" )
		weapon.StopWeaponSound( "arc_cannon_charged_loop" )
	}
}

#if SERVER
var function OnWeaponNpcPrimaryAttack_StormLauncher( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	weapon.EmitWeaponNpcSound( LOUD_WEAPON_AI_SOUND_RADIUS_MP, 0.2 )

	return PlayerOrNPCFire_StormLauncher( attackParams, false, weapon )
}
#endif

var function PlayerOrNPCFire_StormLauncher( WeaponPrimaryAttackParams attackParams, bool playerFired, entity weapon )
{
	//entity owner = weapon.GetWeaponOwner()
	bool shouldCreateProjectile = false
	if ( IsServer() || weapon.ShouldPredictProjectiles() )
		shouldCreateProjectile = true
	#if CLIENT
		if ( !playerFired )
			shouldCreateProjectile = false
	#endif

	if ( shouldCreateProjectile )
	{
		float speed	= 1.0 // 2200.0

 		//TODO:: Calculate better attackParams.dir if auto-titan using mortarShots
		entity bolt = weapon.FireWeaponBolt( attackParams.pos, attackParams.dir, speed, STORM_BALL_DAMAGE_FLAGS, STORM_BALL_DAMAGE_FLAGS, playerFired , 0 )
		if ( bolt != null )
        {
			EmitSoundOnEntity( bolt, "weapon_thermitelauncher_projectile_3p" )
            #if SERVER
				bool charged = weapon.HasMod( "tesla_core_charged" )
                AttachStormBall( bolt, charged ) // wait 0.15s for client prediction
				if ( charged ) // archon core ability
					bolt.ProjectileSetDamageSourceID( eDamageSourceId.mp_titancore_tesla_core )
				else
					bolt.ProjectileSetDamageSourceID( eDamageSourceId.mp_titanweapon_storm_launcher ) // change damageSourceID
            #endif
        }
	}

	return 1
}

#if SERVER
void function AttachStormBall( entity projectile, bool charged = false )
{
    thread AttachStormBall_Threaded( projectile, charged )
}

void function AttachStormBall_Threaded( entity projectile, bool charged )
{
    projectile.EndSignal( "OnDestroy" )

    WaitFrame() // wait for client to predict it...
	PlayFXOnEntity( FX_EMP_ORB, projectile, "" )
    PlayFXOnEntity( FX_EMP_FIELD, projectile, "", <0, 0, -20.0> )
    EmitSoundOnEntity( projectile, "EMP_Titan_Electrical_Field" )

	if ( charged ) // for charged storm ball, do extra fx and sound
	{
		PlayFXOnEntity( FX_EMP_GLOW, projectile )
		PlayFXOnEntity( FX_EMP_FIELD, projectile, "", <0, 0, -21.0> )
		PlayFXOnEntity( FX_EMP_FIELD, projectile, "", <0, 0, -22.0> )
		EmitSoundOnEntity( projectile, "Wpn_LaserTripMine_LaserLoop" )
	}

    thread UpdateStormBallField( projectile, charged )
}

void function UpdateStormBallField( entity projectile, bool charged )
{
    projectile.EndSignal( "OnDestroy" )

	float interval = STORM_DAMAGE_INTERVAL
	while ( true )
	{
		StormBallFieldDamage( projectile, charged )
		wait interval
	}
}

void function StormBallFieldDamage( entity projectile, bool charged )
{
	//print( "RUNNING StormBallFieldDamage()" )
    vector origin = projectile.GetOrigin()
    entity attacker = projectile.GetOwner()

	int damage = STORM_DAMAGE
	int titanDamage = STORM_DAMAGE_HEAVYARMOR
	if ( charged )
		titanDamage = STORM_DAMAGE_HEAVYARMOR_CHARGED

	RadiusDamage(
		origin,									    	// center
		attacker,								    	// attacker
		projectile,										// inflictor
		damage,					            			// damage
		titanDamage,									// damageHeavyArmor
		ARC_TITAN_EMP_FIELD_INNER_RADIUS,		    	// innerRadius, no need to change since we need match visual effect
		ARC_TITAN_EMP_FIELD_RADIUS,				    	// outerRadius, no need to change since we need match visual effect
		SF_ENVEXPLOSION_NO_DAMAGEOWNER,			    	// flags
		0,										    	// distanceFromAttacker
		0,					                        	// explosionForce
		STORM_LIGHTNING_DAMAGE_FLAGS,	            	// scriptDamageFlags
		eDamageSourceId.mp_titanweapon_storm_launcher 	// scriptDamageSourceIdentifier
	)			
}

void function StormLauncher_DamagedTarget( entity victim, var damageInfo )
{
	if ( !IsAlive( victim ) )
		return

    entity inflictor = DamageInfo_GetInflictor( damageInfo )
	if ( !IsValid( inflictor ) )
		return
	if ( !inflictor.IsProjectile() )
		return
	
	array<string> mods = Vortex_GetRefiredProjectileMods( inflictor ) // modded weapon refire behavior
	if ( !mods.contains( "storm_launcher" ) ) // not storm launcher!
		return

    entity attacker = DamageInfo_GetAttacker( damageInfo )
	if( !IsValid( attacker ) )
		return

	// checks all passed, these are actual effects
    PlayDamageSounds( victim, attacker, "titan_rocket_explosion_3p_vs_1p", "Weapon.Explosion_Med", "flesh_explo_med_3p_vs_1p", "Weapon.Explosion_Med" )

	// this will cause a projectile with no ball lightning dealing no damage!
	//OnBallLightningDamage( victim, damageInfo )
}

void function PlayDamageSounds( entity ent, entity attacker, string titan1P_SFX, string titan3P_SFX, string pilot1P_SFX, string pilot3P_SFX )
{
	float currentTime = Time()

	if ( !( ent in file.nextDamagedSoundTime ) )
	{
		if ( ent.IsPlayer() )
			file.nextDamagedSoundTime[ ent ] <- currentTime
		else
			file.nextDamagedSoundTime[ ent ] <- currentTime + RandomFloat( 0.3 )
	}

	if ( file.nextDamagedSoundTime[ ent ] <= currentTime )
	{
		if ( ent.IsPlayer() )
		{
			if ( ent.IsTitan() )
			{
				EmitSoundOnEntityExceptToPlayer( ent, ent, titan3P_SFX )
				EmitSoundOnEntityOnlyToPlayer( ent, ent, titan1P_SFX )
				file.nextDamagedSoundTime[ ent ] = currentTime + RandomFloatRange( 0.5, 0.75 )
			}
			else
			{
				EmitSoundOnEntityExceptToPlayer( ent, ent, pilot3P_SFX )
				EmitSoundOnEntityOnlyToPlayer( ent, ent, pilot1P_SFX )
			}

			// since we hide lightning's hitbeep, do it here
			if ( IsValid( attacker ) && attacker.IsPlayer() )
				EmitSoundOnEntityOnlyToPlayer( attacker, attacker, "Player.Hitbeep" )
		}
		else
		{
			if ( ent.IsTitan() )
				EmitSoundOnEntity( ent, titan3P_SFX )
			else if ( IsHumanSized( ent ) )
				EmitSoundOnEntity( ent, pilot3P_SFX )
		}

		file.nextDamagedSoundTime[ ent ] = currentTime + RandomFloatRange( 0.75, 1.25 )
	}
}
#endif